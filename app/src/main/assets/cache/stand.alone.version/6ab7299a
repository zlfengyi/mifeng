(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var A;
    (function (A) {
    })(A || (A = {}));
    var SoundId;
    (function (SoundId) {
        SoundId[SoundId["BeeWings"] = 0] = "BeeWings";
        SoundId[SoundId["BGM"] = 1] = "BGM";
        SoundId[SoundId["UiClick"] = 2] = "UiClick";
        SoundId[SoundId["GameFail"] = 3] = "GameFail";
        SoundId[SoundId["GameWin"] = 4] = "GameWin";
        SoundId[SoundId["ManDied"] = 5] = "ManDied";
        SoundId[SoundId["WomanDied"] = 6] = "WomanDied";
        SoundId[SoundId["EatKey"] = 7] = "EatKey";
        SoundId[SoundId["FirstBlood"] = 8] = "FirstBlood";
        SoundId[SoundId["DoubleKill"] = 9] = "DoubleKill";
        SoundId[SoundId["TripleKill"] = 10] = "TripleKill";
        SoundId[SoundId["QuadraKill"] = 11] = "QuadraKill";
        SoundId[SoundId["PentaKill"] = 12] = "PentaKill";
        SoundId[SoundId["ACE"] = 13] = "ACE";
    })(SoundId || (SoundId = {}));
    var AnimatorStateEvent;
    (function (AnimatorStateEvent) {
        AnimatorStateEvent["Enter"] = "Enter";
        AnimatorStateEvent["Update"] = "Update";
        AnimatorStateEvent["Exit"] = "Exit";
    })(AnimatorStateEvent || (AnimatorStateEvent = {}));
    var AdStatus;
    (function (AdStatus) {
        AdStatus["None"] = "None";
        AdStatus["Loading"] = "Loading";
        AdStatus["Loaded"] = "Loaded";
        AdStatus["Showing"] = "Showing";
    })(AdStatus || (AdStatus = {}));

    var HagoEvent;
    (function (HagoEvent) {
        HagoEvent[HagoEvent["EnterHall"] = 0] = "EnterHall";
        HagoEvent[HagoEvent["EnterRoom"] = 1] = "EnterRoom";
        HagoEvent[HagoEvent["ExitRoom"] = 2] = "ExitRoom";
        HagoEvent[HagoEvent["StartMatch"] = 3] = "StartMatch";
        HagoEvent[HagoEvent["ReadyGame"] = 4] = "ReadyGame";
        HagoEvent[HagoEvent["StartGame"] = 5] = "StartGame";
        HagoEvent[HagoEvent["Custom"] = 6] = "Custom";
        HagoEvent[HagoEvent["RePlay"] = 7] = "RePlay";
        HagoEvent[HagoEvent["GameResult"] = 8] = "GameResult";
        HagoEvent[HagoEvent["ExitGame"] = 9] = "ExitGame";
        HagoEvent[HagoEvent["BackGround"] = 10] = "BackGround";
        HagoEvent[HagoEvent["Foreground"] = 11] = "Foreground";
        HagoEvent[HagoEvent["Error"] = 12] = "Error";
        HagoEvent[HagoEvent["DisConnect"] = 13] = "DisConnect";
        HagoEvent[HagoEvent["ReConnect"] = 14] = "ReConnect";
        HagoEvent[HagoEvent["PayQuery"] = 15] = "PayQuery";
        HagoEvent[HagoEvent["PayConsumeProduct"] = 16] = "PayConsumeProduct";
        HagoEvent[HagoEvent["GetUserInfo"] = 17] = "GetUserInfo";
    })(HagoEvent || (HagoEvent = {}));
    var ResultState;
    (function (ResultState) {
        ResultState[ResultState["NoStart"] = 0] = "NoStart";
        ResultState[ResultState["Win"] = 1] = "Win";
        ResultState[ResultState["Lose"] = 2] = "Lose";
        ResultState[ResultState["Draw"] = 3] = "Draw";
    })(ResultState || (ResultState = {}));
    var AdType;
    (function (AdType) {
        AdType[AdType["Video"] = 0] = "Video";
        AdType[AdType["Banner"] = 1] = "Banner";
        AdType[AdType["Interstitial"] = 2] = "Interstitial";
    })(AdType || (AdType = {}));
    var GameMode;
    (function (GameMode) {
        GameMode[GameMode["Ai"] = 0] = "Ai";
        GameMode[GameMode["Friend"] = 1] = "Friend";
        GameMode[GameMode["Match"] = 2] = "Match";
    })(GameMode || (GameMode = {}));
    var HagoGameType;
    (function (HagoGameType) {
        HagoGameType[HagoGameType["PK"] = 0] = "PK";
        HagoGameType[HagoGameType["JO"] = 1] = "JO";
    })(HagoGameType || (HagoGameType = {}));
    var HagoEnv;
    (function (HagoEnv) {
        HagoEnv["Test"] = "Test";
        HagoEnv["Product"] = "Product";
    })(HagoEnv || (HagoEnv = {}));
    var HagoCountry;
    (function (HagoCountry) {
        HagoCountry["ID"] = "ID";
        HagoCountry["IN"] = "IN";
        HagoCountry["BR"] = "BR";
        HagoCountry["SG"] = "SG";
        HagoCountry["AE"] = "AE";
        HagoCountry["US"] = "US";
        HagoCountry["RU"] = "RU";
    })(HagoCountry || (HagoCountry = {}));
    var HagoLanguage;
    (function (HagoLanguage) {
        HagoLanguage["hi"] = "hi";
        HagoLanguage["en"] = "en-us";
        HagoLanguage["id"] = "id";
        HagoLanguage["th"] = "th";
        HagoLanguage["vi"] = "vi";
        HagoLanguage["pt"] = "pt-br";
        HagoLanguage["ar"] = "ar";
    })(HagoLanguage || (HagoLanguage = {}));
    var HagoPhoneType;
    (function (HagoPhoneType) {
        HagoPhoneType[HagoPhoneType["SuperLow"] = 1] = "SuperLow";
        HagoPhoneType[HagoPhoneType["Low"] = 2] = "Low";
        HagoPhoneType[HagoPhoneType["Middle"] = 3] = "Middle";
        HagoPhoneType[HagoPhoneType["Height"] = 4] = "Height";
    })(HagoPhoneType || (HagoPhoneType = {}));

    var RPC;
    (function (RPC) {
        RPC[RPC["Ping"] = 0] = "Ping";
        RPC[RPC["Pong"] = 1] = "Pong";
        RPC[RPC["SendError"] = 401] = "SendError";
        RPC[RPC["RecvError"] = 402] = "RecvError";
        RPC[RPC["EnterHall"] = 7] = "EnterHall";
        RPC[RPC["StartMatch"] = 8] = "StartMatch";
        RPC[RPC["EnterRoom"] = 9] = "EnterRoom";
        RPC[RPC["ExitRoom"] = 21] = "ExitRoom";
        RPC[RPC["ReadyRoom"] = 10] = "ReadyRoom";
        RPC[RPC["ReadyGame"] = 11] = "ReadyGame";
        RPC[RPC["StartGame"] = 12] = "StartGame";
        RPC[RPC["CustomData"] = 13] = "CustomData";
        RPC[RPC["SyncData"] = 14] = "SyncData";
        RPC[RPC["OverGame"] = 15] = "OverGame";
        RPC[RPC["ReConnect"] = 19] = "ReConnect";
        RPC[RPC["ExitGame"] = 20] = "ExitGame";
        RPC[RPC["DisConnect"] = 22] = "DisConnect";
        RPC[RPC["ForceExit"] = 24] = "ForceExit";
        RPC[RPC["GetUserInfo"] = 30] = "GetUserInfo";
        RPC[RPC["RePlay"] = 40] = "RePlay";
        RPC[RPC["PayQuery"] = 50] = "PayQuery";
        RPC[RPC["PayConsumeProduct"] = 51] = "PayConsumeProduct";
        RPC[RPC["Error"] = 400] = "Error";
    })(RPC || (RPC = {}));
    var SocketEvent;
    (function (SocketEvent) {
        SocketEvent[SocketEvent["Connected"] = 100001] = "Connected";
        SocketEvent[SocketEvent["Closed"] = 100002] = "Closed";
        SocketEvent[SocketEvent["ReConnect"] = 100003] = "ReConnect";
    })(SocketEvent || (SocketEvent = {}));
    var SocketStatus;
    (function (SocketStatus) {
        SocketStatus[SocketStatus["Connecting"] = 0] = "Connecting";
        SocketStatus[SocketStatus["Connected"] = 1] = "Connected";
        SocketStatus[SocketStatus["Closed"] = 2] = "Closed";
    })(SocketStatus || (SocketStatus = {}));
    class SocketManager {
        constructor() {
            this.MAX_CACHE_MESSAGE = 50;
            this.socket = null;
            this.options = {};
            this.sendIndex = 0;
            this.maxRecvIndex = 0;
            this.recvIndex = 0;
            this.sendCache = {};
            this.tmpCache = [];
            this.reConnectCount = 0;
            this.maxConnectCount = 3;
            this.status = SocketStatus.Closed;
            this.pingIntervalId = -1;
            this.checkTimeId = -1;
            this.pingTime = 0;
            this.pingTimeStamp = 0;
            this.events = {};
            this.isReConnect = false;
            this.pings = 0;
            this.isSendPing = false;
            this.socket = new Laya.Socket();
            this.socket.disableInput = true;
            this.socket.endian = Laya.Byte.BIG_ENDIAN;
            this.pingTime = 0;
            if (this.pingIntervalId == -1) {
                this.pingIntervalId = setInterval(this.pingInterval.bind(this), 1000);
            }
        }
        static get Instance() {
            if (this.sInstance == null) {
                this.sInstance = new SocketManager();
            }
            return this.sInstance;
        }
        connect(options) {
            if (this.status != SocketStatus.Closed) {
                return false;
            }
            this.status = SocketStatus.Connecting;
            if (options) {
                this.options = options;
            }
            let url = this.options.url
                ? this.options.url
                : `${this.options.protocol}://${this.options.ip}:${this.options.port}`;
            this.socket.disableInput = true;
            this.socket.connectByUrl(url);
            this.pingTime = 0;
            this.socket.on(Laya.Event.OPEN, this, this.onOpen);
            this.socket.on(Laya.Event.MESSAGE, this, this.onMessage);
            this.socket.on(Laya.Event.CLOSE, this, this.onClose);
            this.socket.on(Laya.Event.ERROR, this, this.onError);
            if (this.checkTimeId != -1) {
                clearTimeout(this.checkTimeId);
            }
            this.checkTimeId = setTimeout(() => {
                this.checkOpened();
            }, 3000);
            return true;
        }
        checkOpened() {
            this.checkTimeId = -1;
            if (this.status != SocketStatus.Connected) {
                this.status = SocketStatus.Closed;
                this.cleanSocket();
                if (this.reConnectCount <= this.maxConnectCount) {
                    this.reConnectCount++;
                    console.log(`连接超时 正在尝试第${this.reConnectCount} 次重连`);
                    this.reConnect();
                }
                else {
                    console.warn('尝试三次重连依旧重连不上: 由玩家自主控制连接');
                    this.reConnectCount = 0;
                    let events = this.events[SocketEvent.Closed];
                    if (events != undefined && events.length != 0) {
                        events.forEach((event) => {
                            event.callback && event.callback.call(event.target);
                        });
                    }
                }
            }
        }
        cleanSocket() {
            this.socket.off(Laya.Event.OPEN, this, this.onOpen);
            this.socket.off(Laya.Event.MESSAGE, this, this.onMessage);
            this.socket.off(Laya.Event.CLOSE, this, this.onClose);
            this.socket.off(Laya.Event.ERROR, this, this.onError);
            this.socket.cleanSocket();
        }
        send(rpc, msgs = null, isCache = true) {
            if (msgs == null) {
                msgs = {};
            }
            if (msgs['isCache'] !== undefined) {
                isCache = msgs['isCache'];
            }
            if (this.status != SocketStatus.Connected || (this.tmpCache.length > 0 && isCache)) {
                this.tmpCache.push({ rpc: rpc, msgs: msgs });
                return;
            }
            this.sendIndex++;
            msgs['sendIndex'] = this.sendIndex;
            let data = JSON.stringify({ rpc: rpc, msgs: msgs });
            this.sendCache[this.sendIndex] = data;
            this.socket.send(data);
            if (this.sendCache[this.sendIndex - this.MAX_CACHE_MESSAGE]) {
                delete this.sendCache[this.sendIndex - this.MAX_CACHE_MESSAGE];
            }
        }
        fastSend(rpc, msgs = null) {
            if (msgs == null) {
                msgs = {};
            }
            msgs['sendIndex'] = this.sendIndex;
            msgs['recvIndex'] = this.recvIndex;
            let data = JSON.stringify({ rpc: rpc, msgs: msgs });
            this.socket.send(data);
        }
        close() {
            if (this.status != SocketStatus.Closed) {
                this.status = SocketStatus.Closed;
                this.cleanSocket();
            }
        }
        on(rpc, callback, target) {
            if (this.events[rpc] == undefined) {
                this.events[rpc] = [];
            }
            this.events[rpc].push({ callback: callback, target: target });
        }
        off(rpc, callback, target) {
            if (this.events[rpc]) {
                for (let index = this.events[rpc].length - 1; index >= 0; index--) {
                    let event = this.events[rpc][index];
                    if (event == undefined || (event.callback == callback && event.target == target)) {
                        this.events[rpc].splice(index, 1);
                    }
                }
            }
        }
        reConnect(isReset = false) {
            if (isReset) {
                this.reConnectCount = 0;
            }
            this.connect();
        }
        onOpen(event) {
            this.status = SocketStatus.Connected;
            if (this.checkTimeId != -1) {
                clearTimeout(this.checkTimeId);
                this.checkTimeId = -1;
            }
            let events = this.isReConnect
                ? this.events[SocketEvent.ReConnect]
                : this.events[SocketEvent.Connected];
            if (events != undefined && events.length != 0) {
                events.forEach((event) => {
                    event.callback && event.callback.call(event.target);
                });
            }
            this.reConnectCount = 0;
            this.isReConnect = true;
            this.pingTime = 0;
            if (this.pingIntervalId == -1) {
                this.pingIntervalId = setInterval(this.pingInterval.bind(this), 1000);
            }
        }
        onMessage(msgData) {
            this.pingTime = 0;
            let data;
            try {
                data = JSON.parse(msgData);
            }
            catch (ex) {
                return;
            }
            if (!this.checkMessage(data)) {
                return;
            }
            delete data['msgs']['recvIndex'];
            if (this.events[data.rpc] != undefined && this.events[data.rpc].length > 0) {
                this.events[data.rpc].forEach((event) => {
                    event.callback && event.callback.call(event.target, data.msgs);
                });
            }
        }
        onError(event) {
            console.log('error:', event);
        }
        onClose(event) {
            console.warn('socket 断开:', event.code, event.reason, new Date().getTime());
            if (this.checkTimeId != -1) {
                clearTimeout(this.checkTimeId);
                this.checkTimeId = -1;
            }
            this.status = SocketStatus.Closed;
            if (this.reConnectCount <= this.maxConnectCount) {
                setTimeout(() => {
                    console.log(` 网络断开 正在尝试第${this.reConnectCount} 次重连`);
                    this.reConnect();
                }, 1000);
                this.reConnectCount++;
                console.log('reConnectCount:', this.reConnectCount);
            }
            else {
                console.warn('尝试三次重连依旧重连不上: 由玩家自主控制连接');
                this.reConnectCount = 0;
                let events = this.events[SocketEvent.Closed];
                if (events != undefined && events.length != 0) {
                    events.forEach((event) => {
                        event.callback && event.callback.call(event.target);
                    });
                }
            }
        }
        checkMessage(data) {
            if (data.rpc === undefined || data.msgs === undefined) {
                return false;
            }
            if (data.rpc == RPC.Pong) {
                this.isSendPing = false;
                if (data.msgs && data.msgs['recvIndex']) {
                    let recvIndex = data.msgs['recvIndex'];
                    if (recvIndex > this.recvIndex) {
                        console.log('心跳 要求服务端补发数据');
                        this.socket.send(JSON.stringify({ rpc: RPC.RecvError, msgs: { recvIndex: this.recvIndex + 1 } }));
                    }
                }
                this.pings = Date.now() - this.pingTimeStamp;
                return false;
            }
            else if (data.rpc == RPC.SendError) {
                console.log('发送错误 向服务器补发数据');
                if (this.sendCache[data.msgs['sendIndex']]) {
                    this.socket.send(this.sendCache[data.msgs['sendIndex']]);
                }
                else {
                    this.socket.send(JSON.stringify({ rpc: RPC.SendError, msgs: { error: '该缓存为null' } }));
                }
                return false;
            }
            else if (data.rpc == RPC.RecvError) {
                console.log('接收错误 要求服务器补发数据');
                if (data.msgs['error']) {
                    console.error(data.msgs['error']);
                }
                this.recvIndex++;
                if (this.maxRecvIndex > this.recvIndex) {
                    this.socket.send(JSON.stringify({ rpc: RPC.RecvError, msgs: { recvIndex: this.recvIndex } }));
                }
                return false;
            }
            else {
                if (data.msgs.recvIndex === undefined || data.msgs.recvIndex <= this.recvIndex) {
                    return false;
                }
                if (data.msgs.recvIndex != this.recvIndex + 1) {
                    this.maxRecvIndex = data.msgs.recvIndex;
                    console.log('接收错误:', data.msgs.recvIndex, this.recvIndex);
                    this.socket.send(JSON.stringify({ rpc: RPC.RecvError, msgs: { recvIndex: this.recvIndex + 1 } }));
                    return false;
                }
                else {
                    this.recvIndex = data.msgs.recvIndex;
                    if (this.maxRecvIndex > this.recvIndex) {
                        console.log('还有未接接收的包:', data.msgs.recvIndex, this.recvIndex);
                        this.socket.send(JSON.stringify({ rpc: RPC.RecvError, msgs: { recvIndex: this.recvIndex + 1 } }));
                    }
                    else {
                        this.maxRecvIndex = this.recvIndex;
                    }
                    return true;
                }
            }
        }
        pingInterval() {
            this.pingTime += 1;
            if (this.status == SocketStatus.Connected && this.tmpCache.length > 0) {
                let sendData = this.tmpCache.shift();
                console.log('数据补发:', sendData);
                this.send(sendData.rpc, sendData.msgs, false);
            }
            if (this.pingTime > 3 && this.status == SocketStatus.Connected) {
                console.log('ping 超过3s 断线:', Date.now());
                this.status = SocketStatus.Closed;
                this.cleanSocket();
                this.reConnectCount++;
                console.log(`ping 超时 正在尝试第${this.reConnectCount} 次重连`);
                this.reConnect();
                this.pings = 10000;
            }
            else if (this.pingTime > 1 && this.status == SocketStatus.Connected && !this.isSendPing) {
                this.fastSend(RPC.Ping, { sendIndex: this.sendIndex });
                this.pingTimeStamp = Date.now();
                this.isSendPing = true;
            }
        }
    }
    SocketManager.sInstance = null;

    class GlobalConfig {
    }
    GlobalConfig.serverId = '142214';
    GlobalConfig.appKey = 'c343dcb4f8ca4cc6ae0191236c5e954b';
    GlobalConfig.gameId = 'mifengzheren';
    GlobalConfig.reportId = 'UA-176072770-10';
    GlobalConfig.adUnitId = 0;
    GlobalConfig.channelConfig = {
        hg: {
            videoId: 10361
        },
        tt: {
            videoId: '1v00akof02dcmadf03',
            bannerId: 'ieo37nc846e26k82am',
            interstitialId: 'g4joaeoo66n14bc7g4'
        },
        vv: {
            videoId: '463f623d9db34c2985ae35dc75501555'
        },
        wx: {}
    };

    let addRoot = function (obj, root) {
        for (let i in obj) {
            obj[i] = root + obj[i];
        }
    };
    let CJson = {
        AiConfig: 'AiConfig.json',
        BeeConfig: 'BeeConfig.json',
        LevelConfig: 'LevelConfig.json',
        TaskConfig: 'TaskConfig.json'
    };
    addRoot(CJson, 'jsons/');
    let CScene3D = {
        Game: 'LayaScene_game/Conventional/game.ls'
    };
    addRoot(CScene3D, 'scenes/');
    let CSprite3D = {};
    addRoot(CSprite3D, 'models/');
    let CPrefab = {
        SkinItem: 'skinItem.json'
    };
    addRoot(CPrefab, 'Prefabs/');
    let CSound = {};
    addRoot(CSound, 'sounds/');
    let CTexture = {};
    addRoot(CTexture, 'textures/');
    let CFont = {
        font_w: 'font_w.fnt'
    };
    addRoot(CFont, 'fonts/');
    let CBin = {
        CMath: 'CMath.bin'
    };
    addRoot(CBin, 'bins/');
    let CPlfb = {
        Game: 'game.plfb'
    };
    addRoot(CPlfb, 'plfbs/');
    let CPlf = {
        Game: 'game.plf'
    };
    addRoot(CPlf, 'plfs/');
    let CMaterial = {
        Sky1: 'sky1.lmat',
        Sky2: 'sky2.lmat',
        Sky3: 'sky3.lmat'
    };
    addRoot(CMaterial, 'scenes/LayaScene_game/Conventional/Assets/Materials/');
    let CAtlas = {};
    addRoot(CAtlas, 'res/atlas/');
    let CImage = {};
    addRoot(CImage, 'images/');

    class ConfigManager {
        static init() {
            for (const key in CJson) {
                if (CJson.hasOwnProperty(key)) {
                    this.configDic[CJson[key]] = JSON.parseRecursion(Laya.loader.getRes(CJson[key]));
                }
            }
        }
        static getConfigs(key) {
            return this.configDic[key];
        }
        static getConfig(key, index) {
            return this.configDic[key] ? this.configDic[key][index] : null;
        }
        static getRandomConfig(key) {
            if (this.configDic[key] && this.configDic[key] instanceof Array) {
                let list = this.configDic[key];
                return list[Math.floor(Math.random() * list.length)];
            }
            else {
                return null;
            }
        }
        static findConfig(key, predicate) {
            if (this.configDic[key] && this.configDic[key] instanceof Array) {
                let list = this.configDic[key];
                return list.find(predicate);
            }
            else {
                return null;
            }
        }
    }
    ConfigManager.configDic = {};

    var EventType;
    (function (EventType) {
        EventType[EventType["ResProgress"] = 0] = "ResProgress";
        EventType[EventType["LoadingSuccess"] = 1] = "LoadingSuccess";
        EventType[EventType["StartGame"] = 2] = "StartGame";
        EventType[EventType["EndGame"] = 3] = "EndGame";
        EventType[EventType["ScreenShot"] = 4] = "ScreenShot";
        EventType[EventType["FreshLevelId"] = 5] = "FreshLevelId";
        EventType[EventType["FreshCoin"] = 6] = "FreshCoin";
        EventType[EventType["FreshWave"] = 7] = "FreshWave";
        EventType[EventType["ShowKillIcon"] = 8] = "ShowKillIcon";
        EventType[EventType["HideKillIcon"] = 9] = "HideKillIcon";
        EventType[EventType["KeyCount"] = 10] = "KeyCount";
        EventType[EventType["CoinTurn"] = 11] = "CoinTurn";
        EventType[EventType["TaskDot"] = 12] = "TaskDot";
        EventType[EventType["SkinDot"] = 13] = "SkinDot";
    })(EventType || (EventType = {}));
    class EventManager {
        static isOn(type, caller, callBack) {
            if (this.handlers[type] == undefined) {
                return false;
            }
            let handlerIndex = this.handlers[type].findIndex((tmpHander) => {
                return tmpHander.caller == caller && tmpHander.callBack == callBack;
            });
            if (handlerIndex == -1) {
                return false;
            }
            else {
                return true;
            }
        }
        static on(type, caller, callBack) {
            if (this.handlers[type] == undefined) {
                this.handlers[type] = [];
            }
            let handlerIndex = this.handlers[type].findIndex((tmpHander) => {
                return tmpHander.caller == caller && tmpHander.callBack == callBack;
            });
            if (handlerIndex != -1) {
                console.log('事件已经注册，不能重复注册事件');
            }
            else {
                this.handlers[type].push({ caller: caller, callBack: callBack, isOnce: false });
            }
        }
        static once(type, caller, callBack) {
            if (this.handlers[type] == undefined) {
                this.handlers[type] = [];
            }
            let handlerIndex = this.handlers[type].findIndex((tmpHander) => {
                return tmpHander.caller == caller && tmpHander.callBack == callBack;
            });
            if (handlerIndex != -1) {
                console.log('事件已经注册，不能重复注册事件');
            }
            else {
                this.handlers[type].push({ caller: caller, callBack: callBack, isOnce: true });
            }
        }
        static off(type, caller, callBack) {
            if (this.handlers[type] == undefined) {
                return;
            }
            let handlerIndex = this.handlers[type].findIndex((tmpHander) => {
                return tmpHander.caller == caller && tmpHander.callBack == callBack;
            });
            if (handlerIndex != -1) {
                this.handlers[type].splice(handlerIndex, 1);
            }
        }
        static emit(type, ...params) {
            if (this.handlers[type]) {
                this.handlers[type].forEach((handler, index) => {
                    if (handler) {
                        handler.callBack.call(handler.caller, ...params);
                    }
                });
                this.handlers[type] = this.handlers[type].filter((handler) => {
                    return handler.isOnce == false;
                });
            }
        }
    }
    EventManager.handlers = [];
    window['EventManager'] = EventManager;

    class BaseHago {
        constructor() {
            this.testRobot = false;
            this.isHago = false;
            this.startTime = 0;
            this.systemTime = 0;
            this.userData = {
                uid: '',
                name: '',
                avatar: '',
                lv: 1
            };
            this.friendInfos = [];
            this.gameUserInfos = [];
            this.inviteInfo = {};
            this.lastSystemTime = 0;
            this.timeInterval = -1;
            this.isRefreshTime = false;
            this.isEnterBackground = false;
            this.isStart = false;
            this.isOver = false;
            this.events = {};
            this.type = HagoGameType.JO;
            this.rewardedVideoAd = null;
            document.addEventListener('visibilitychange', (event) => {
                if (document['hidden']) {
                    this.emit(HagoEvent.BackGround);
                    this.isEnterBackground = true;
                }
                else {
                    this.emit(HagoEvent.Foreground);
                    this.isEnterBackground = false;
                }
                console.log(document['hidden']);
            });
            try {
                console.log('hg:', hg);
                this.isHago = hg != null;
            }
            catch (error) {
                this.isHago = false;
            }
            this.initEvent();
            this.initData();
            if (!this.isHago) {
                SocketManager.Instance.send(RPC.GetUserInfo);
            }
            if (this.isHago) {
                let getGameInviteInfo = hg.getGameInviteInfo();
                if (getGameInviteInfo && getGameInviteInfo.length > 0) {
                    try {
                        this.inviteInfo = JSON.parse(getGameInviteInfo);
                    }
                    catch (error) {
                        console.warn('获取邀请消息出错');
                    }
                }
            }
        }
        initEvent() {
            SocketManager.Instance.on(SocketEvent.Connected, this.onNetConnected, this);
            SocketManager.Instance.on(SocketEvent.ReConnect, this.onNetReConnected, this);
            SocketManager.Instance.on(SocketEvent.Closed, this.onNetClosed, this);
            SocketManager.Instance.on(RPC.OverGame, this.onNetOverGame, this);
            SocketManager.Instance.on(RPC.StartGame, this.onNetStartGame, this);
            SocketManager.Instance.on(RPC.CustomData, this.onNetCustomData, this);
            SocketManager.Instance.on(RPC.ExitGame, this.onNetExitGame, this);
            SocketManager.Instance.on(RPC.Error, this.onNetError, this);
            SocketManager.Instance.on(RPC.EnterHall, this.onNetEnterHall, this);
            SocketManager.Instance.on(RPC.EnterRoom, this.onNetEnterRoom, this);
            SocketManager.Instance.on(RPC.RePlay, this.onNetRePlay, this);
            SocketManager.Instance.on(RPC.ExitRoom, this.onNetExitRoom, this);
            SocketManager.Instance.on(RPC.ReadyGame, this.onNetReadyGame, this);
            SocketManager.Instance.on(RPC.GetUserInfo, this.onNetGetUserInfo, this);
            SocketManager.Instance.on(RPC.ReConnect, this.onNetUserReConnected, this);
            SocketManager.Instance.on(RPC.DisConnect, this.onNetUserDisConnected, this);
            SocketManager.Instance.on(RPC.PayQuery, this.onNetGetUserAccount, this);
            SocketManager.Instance.on(RPC.PayConsumeProduct, this.onNetGameConsumeProduct, this);
            EventManager.once(EventType.LoadingSuccess, this, this.onLoadSucessed);
        }
        onLoadSucessed() {
            wait(() => this.isInit).then(() => {
                Laya.loader.load(this.userData.avatar, Laya.Handler.create(this, () => {
                    this.emit(HagoEvent.GetUserInfo);
                }), null, Laya.Loader.IMAGE, 1, true);
                this.getFriendInfos((error, infos) => {
                    if (error != null) {
                        console.error('getFriendInfos error:', error);
                    }
                    else if (infos != null) {
                        this.friendInfos = infos;
                    }
                });
            });
            this.isLoaded = true;
        }
        onNetUserReConnected(msgs) {
            if (msgs.hostUID != null && this.roomData != null) {
                this.roomData.hostUID = msgs.hostUID;
            }
            this.emit(HagoEvent.ReConnect, msgs);
        }
        onNetUserDisConnected(msgs) {
            if (msgs.hostUID != null && this.roomData != null) {
                this.roomData.hostUID = msgs.hostUID;
            }
            this.emit(HagoEvent.DisConnect, msgs);
        }
        initData() { }
        onNetGetUserInfo(msgs) {
            this.isInit = true;
            for (const key in msgs) {
                if (msgs.hasOwnProperty(key)) {
                    this.userData[key] = msgs[key];
                }
            }
        }
        onNetGetUserAccount(msgs) {
            this.emit(HagoEvent.PayQuery, msgs);
        }
        onNetGameConsumeProduct(msgs) {
            this.emit(HagoEvent.PayConsumeProduct, msgs);
        }
        onNetConnected() {
            SocketManager.Instance.send(RPC.EnterHall, {
                serverId: GlobalConfig.serverId,
                gameId: GlobalConfig.gameId,
                userData: this.userData,
                channel: this.roomData.channelID || 'yy',
                appKey: GlobalConfig.appKey
            });
            this.systemTime = Date.now();
            this.lastSystemTime = Date.now();
            this.timeInterval = setInterval(this.timeClockInterval.bind(this), 100);
        }
        onNetError(msgs) {
            this.emit(HagoEvent.Error, msgs);
        }
        onNetReConnected() {
            SocketManager.Instance.fastSend(RPC.ReConnect, {
                joinID: this.roomData.roomID,
                userData: this.userData,
                roomData: this.roomData,
                serverId: GlobalConfig.serverId,
                gameId: GlobalConfig.gameId
            });
        }
        onNetEnterHall(msgs) {
            this.roomData = {};
            this.gameUserInfos = [];
            this.emit(HagoEvent.EnterHall, msgs);
        }
        onNetEnterRoom(msgs) {
            this.systemTime = msgs.timestamp;
            this.lastSystemTime = Date.now();
            this.isRefreshTime = true;
            if (msgs.error == null) {
                if (msgs.userInfos != null) {
                    this.gameUserInfos = msgs.userInfos;
                    this.roomData.hostUID = msgs.hostUID;
                    this.roomData.roomID = msgs.roomId;
                    this.roomData.opt = msgs.opt;
                }
                this.gameUserInfos[msgs.userInfo.seat] = msgs.userInfo;
            }
            this.emit(HagoEvent.EnterRoom, msgs);
        }
        onNetRePlay(msgs) {
            this.emit(HagoEvent.RePlay, msgs);
        }
        onNetExitRoom(msgs) {
            if (msgs.error == null) {
                if (msgs.uid == this.userData.uid) {
                    this.roomData = {};
                    this.gameUserInfos = [];
                }
                else {
                    let userIndex = this.gameUserInfos.findIndex((tmpUser) => {
                        return tmpUser && tmpUser.uid == msgs.uid;
                    });
                    if (userIndex != -1) {
                        this.gameUserInfos[userIndex] = null;
                    }
                    this.roomData.hostUID = msgs.hostUID;
                }
            }
            this.emit(HagoEvent.ExitRoom, msgs);
        }
        onNetClosed() {
            this.emit(HagoEvent.DisConnect, { uid: this.userData.uid });
        }
        onNetOverGame(msgs) {
            if (msgs.error == null && msgs.isOver) {
                this.isOver = true;
                this.gameUserInfos.forEach((tmpUser) => {
                    if (tmpUser) {
                        tmpUser.resultInfo = null;
                    }
                });
            }
            this.emit(HagoEvent.GameResult, msgs);
        }
        onNetReadyGame(msgs) {
            this.emit(HagoEvent.ReadyGame, msgs);
        }
        onNetStartGame(msgs) {
            if (msgs.error == null) {
                this.isStart = true;
                this.startTime = msgs.timestamp;
                this.systemTime = msgs.timestamp;
                this.lastSystemTime = Date.now();
                this.isRefreshTime = true;
                this.gameUserInfos = msgs.userInfos;
            }
            this.emit(HagoEvent.StartGame, msgs);
        }
        onNetCustomData(msgs) {
            this.systemTime = msgs.timestamp;
            this.lastSystemTime = Date.now();
            this.isRefreshTime = true;
            if (msgs.error) {
                console.error('onNetCustomData:', msgs.error);
                return;
            }
            if (msgs.uid == this.userData.uid) {
                return;
            }
            this.emit(HagoEvent.Custom, msgs);
        }
        onNetExitGame() {
            this.emit(HagoEvent.ExitGame);
            console.log('onNetExitGame');
            if (this.isHago) {
                hg.exitMiniProgram({
                    exitConfirm: false,
                    success: () => {
                        console.log('exit success');
                    },
                    fail: (res) => {
                        console.log('exit fail:', res);
                    }
                });
            }
            else {
                window.close();
            }
            SocketManager.Instance.close();
        }
        timeClockInterval() {
            if (!this.isRefreshTime) {
                let now = Date.now();
                if (now - this.lastSystemTime < 150) {
                    this.systemTime += now - this.lastSystemTime;
                }
                this.lastSystemTime = now;
            }
            this.isRefreshTime = false;
        }
        connect() {
            if (this.url) {
                SocketManager.Instance.connect({ url: this.url });
            }
        }
        reConnect() {
            SocketManager.Instance.reConnect(true);
        }
        enterRoom(info) {
            this.roomData.opt = info.opt;
            this.roomData.mode = info.mode;
            this.roomData.playerCount = info.playerCount;
            if (info.mode == GameMode.Ai) {
                this.roomData.mode = info.mode;
                this.userData.seat = 0;
                let tmpUserInfos = [];
                let selfUserInfo = {
                    uid: this.userData.uid,
                    avatar: this.userData.avatar,
                    lv: this.userData.lv,
                    name: this.userData.name,
                    isAI: false,
                    seat: 0,
                    isReady: false,
                    opt: this.userData.opt
                };
                tmpUserInfos.push(selfUserInfo);
                let aiUserInfos = this.getAiUser(info.playerCount - 1);
                aiUserInfos.forEach((tmpUserInfo, index) => {
                    tmpUserInfo.isAI = true;
                    tmpUserInfo.seat = index + 1;
                    tmpUserInfo.isReady = true;
                    tmpUserInfo.lv = Math.floor(Math.random() * 3) - 1 + selfUserInfo.lv;
                    if (tmpUserInfo.lv <= 0) {
                        tmpUserInfo.lv = 1;
                    }
                    tmpUserInfos.push(tmpUserInfo);
                });
                this.onNetEnterRoom({
                    userInfos: tmpUserInfos,
                    hostUID: this.userData.uid,
                    roomId: MD5(Date.now() + Math.random()),
                    opt: info.opt,
                    userInfo: selfUserInfo,
                    timestamp: Date.now(),
                    uid: selfUserInfo.uid
                });
                return;
            }
            SocketManager.Instance.send(RPC.EnterRoom, {
                roomData: this.roomData,
                userData: this.userData,
                info: info,
                type: this.type
            });
        }
        exitRoom() {
            if (this.roomData.mode != GameMode.Ai) {
                SocketManager.Instance.send(RPC.ExitRoom);
            }
            this.onNetExitRoom({ uid: this.userData.uid, hostUID: this.userData.uid });
        }
        rePlay(msgs = {}) {
            if (this.roomData.mode == GameMode.Ai) {
                if (msgs.opt) {
                    this.roomData.opt = msgs.opt;
                }
                this.readyGame();
                return;
            }
            SocketManager.Instance.send(RPC.RePlay, msgs);
        }
        readyGame() {
            if (this.roomData.mode == GameMode.Ai) {
                let selfUser = this.getGameUser(this.userData.uid);
                selfUser.isReady = true;
                this.onNetStartGame({ timestamp: Date.now(), userInfos: this.gameUserInfos });
                return;
            }
            SocketManager.Instance.send(RPC.ReadyGame);
        }
        overGame(resultInfo) {
            if (resultInfo != null && resultInfo.uid == null) {
                resultInfo.uid = this.userData.uid;
            }
            if (this.roomData.mode == GameMode.Ai) {
                let selfUser = this.getGameUser(resultInfo.uid);
                selfUser.resultInfo = resultInfo;
                let resultInfos = [];
                let isAllOver = this.gameUserInfos.every((tmpUser) => {
                    if (tmpUser.resultInfo == null) {
                        return false;
                    }
                    resultInfos.push({ uid: tmpUser.uid, score: tmpUser.resultInfo.score, opt: tmpUser.resultInfo.opt });
                    return true;
                });
                if (isAllOver) {
                    resultInfos.sort((bef, aft) => {
                        return bef.score > aft.score ? -1 : bef.score == aft.score ? 0 : 1;
                    });
                    resultInfos.forEach((tmpResultInfo, index) => {
                        tmpResultInfo['rankIndex'] = index + 1;
                    });
                    this.onNetOverGame({
                        resultInfos: resultInfos,
                        isOver: true
                    });
                }
                else {
                    this.onNetOverGame({
                        resultInfo: { uid: resultInfo.uid, score: resultInfo.score, opt: resultInfo.opt },
                        isOver: false
                    });
                }
                return;
            }
            SocketManager.Instance.send(RPC.OverGame, resultInfo);
        }
        custom(msgs) {
            if (msgs.uid === undefined) {
                msgs.uid = this.userData.uid;
            }
            if (this.roomData.mode == GameMode.Ai) {
                this.emit(HagoEvent.Custom, JSON.parse(JSON.stringify(msgs)));
                return;
            }
            if (msgs.uid == this.userData.uid) {
                this.emit(HagoEvent.Custom, JSON.parse(JSON.stringify(msgs)));
            }
            SocketManager.Instance.send(RPC.CustomData, msgs);
        }
        exitGame(options) {
            console.log('发送退出房间');
            SocketManager.Instance.send(RPC.ExitGame);
            this.onNetExitGame();
        }
        forceExit(uid) {
            if (this.userData.uid == this.roomData.hostUID) {
                SocketManager.Instance.send(RPC.ForceExit, { uid: uid });
            }
            else {
                console.warn('只有房主才能踢人');
            }
        }
        gameLoaded() {
            if (this.isHago) {
                console.log('game load Result');
                hg.gameLoadResult && hg.gameLoadResult({ code: 0 });
            }
        }
        initConfig(appKey) {
            if (this.roomData) {
                this.roomData['appKey'] = appKey;
            }
        }
        on(event, method, caller) {
            if (this.events[event] == null) {
                this.events[event] = [];
            }
            let isContains = this.events[event].some((handler) => {
                return handler.method == method && handler.caller == caller;
            });
            if (!isContains) {
                this.events[event].push({ method: method, caller: caller });
            }
        }
        off(event, method, caller) {
            if (this.events[event] == null) {
                this.events[event] = [];
            }
            let eventIndex = this.events[event].findIndex((handler) => {
                return handler.method == method && handler.caller == caller;
            });
            if (eventIndex != -1) {
                this.events[event].splice(eventIndex, 1);
            }
        }
        emit(event, msgs = undefined) {
            if (this.events[event] == null) {
                this.events[event] = [];
            }
            this.events[event].forEach((handler) => {
                if (handler.caller) {
                    handler.method.call(handler.caller, msgs);
                }
                else {
                    handler.method(msgs);
                }
            });
        }
        updateCloseView(obj) {
            if (this.isHago) {
                hg.updateCloseView(obj);
            }
        }
        getData(keys, callback) {
            if (typeof keys == 'string') {
                keys = [keys];
            }
            if (this.isHago) {
                hg.getUserCloudStorage({
                    keyList: keys,
                    success: (res) => {
                        callback && callback(res);
                    },
                    fail: () => {
                        callback && callback(null, '获取数据失败');
                    }
                });
            }
            else {
                let data = [];
                keys.forEach((key) => {
                    let value = Laya.LocalStorage.getItem(key + GlobalConfig.gameId);
                    data.push({ key: key, value: value });
                });
                callback && callback(data);
            }
        }
        saveData(data, callback) {
            if (!(data instanceof Array)) {
                data = [data];
            }
            if (this.isHago) {
                hg.setUserCloudStorage({
                    KVDataList: data,
                    success: () => {
                        callback && callback();
                    },
                    fail: () => {
                        callback && callback('存储数据失败');
                    }
                });
            }
            else {
                data.forEach((item) => {
                    Laya.LocalStorage.setItem(item.key + GlobalConfig.gameId, item.value);
                });
                callback && callback();
            }
        }
        clearData(keyList, callBack) {
            if (this.isHago) {
                hg.removeUserCloudStorage({
                    keyList: keyList,
                    success: function (res) {
                        callBack && callBack(true);
                    },
                    fail: function () {
                        callBack && callBack(false);
                    }
                });
            }
            else {
                keyList.forEach((key) => {
                    Laya.LocalStorage.removeItem(key + GlobalConfig.gameId);
                });
                callBack && callBack(true);
            }
        }
        getFriendInfos(callback) {
            if (this.isHago) {
                hg.getFriendInfos({
                    success: (res) => {
                        callback && callback(null, res);
                    },
                    fail: (res) => {
                        callback && callback(res.errCode, null);
                    }
                });
            }
            else {
                let friendInfos = [];
                let aiInfos = this.getAiUser(10);
                aiInfos.forEach((aiInfo) => {
                    friendInfos.push({
                        uid: aiInfo.uid,
                        nick: aiInfo.name,
                        avatar: aiInfo.avatar,
                        type: 0,
                        dist: 2.3,
                        onlineStatus: 1,
                        sex: aiInfo.sex
                    });
                });
                callback && callback(null, friendInfos);
                console.warn('getFriendInfos 接口只在 Hago 平台生效, 非ai平台获取的值为系统模拟值');
            }
        }
        addFriend(uid, callback) {
            if (this.isHago) {
                hg.getFriendInfos({
                    success: (res) => {
                        let info = hg.getUserInfoByUids({
                            uids: [uid],
                            success: (infoRes) => {
                                let friendInfo = infoRes.pop();
                                this.friendInfos.push({
                                    uid: friendInfo.uid,
                                    nick: friendInfo.nick,
                                    avatar: friendInfo.avatar,
                                    sex: friendInfo.sex,
                                    onlineStatus: 1
                                });
                            }
                        });
                        callback && callback(0);
                    },
                    fail: (res) => {
                        callback && callback(res.code);
                    }
                });
            }
            else {
                console.warn('addFriend 接口只在 Hago 平台生效');
            }
        }
        getFriendCloudStorage(keys, callback) {
            if (this.isHago) {
                if (typeof keys == 'string') {
                    keys = [keys];
                }
                hg.getFriendCloudStorage({
                    keyList: keys,
                    success: (res) => {
                        callback && callback(res.data || res);
                    }
                });
            }
            else {
                console.warn('getFriendCloudStorage 接口只在 Hago 平台生效');
            }
        }
        showUserCard(uid) {
            if (this.isHago) {
                hg.showUserCard({ uid: uid });
            }
            else {
                console.warn('showUserCard 接口只在 Hago 平台生效');
            }
        }
        sendMsgInGame(msgs) {
            if (this.isHago) {
                if (!msgs.showButton) {
                    msgs.showButton = true;
                }
                if (msgs.infoPayload == null) {
                    msgs.infoPayload = {};
                }
                if (msgs.infoPayload['uid'] == null) {
                    msgs.infoPayload['uid'] = this.userData.uid;
                }
                if (msgs.infoPayload['roomId'] == null) {
                    msgs.infoPayload['roomId'] = this.roomData.roomID;
                }
                msgs.infoPayload = JSON.stringify(msgs.infoPayload);
                hg.sendMsgInGame(msgs);
            }
            else {
                console.warn('sendMsgInGame 接口只在 Hago 平台生效');
            }
        }
        setRank(info) {
            if (this.isHago) {
                hg.setRank(info);
            }
            else {
                console.warn('setRank 接口只在 Hago 平台生效');
            }
        }
        getRank(info) {
            if (this.isHago) {
                hg.getRank(info);
            }
            else {
                let rankInfos = [];
                rankInfos.push({
                    openid: this.userData.uid,
                    rank: 1,
                    score: 100,
                    avatarUrl: this.userData.avatar,
                    name: this.userData.name
                });
                let aiInfos = this.getAiUser(5);
                for (let index = 0; index < aiInfos.length; index++) {
                    let aiInfo = aiInfos[index];
                    rankInfos.push({
                        openid: aiInfo.uid,
                        rank: index + 2,
                        score: 100 - (index + 1) * 10,
                        avatarUrl: aiInfo.avatar,
                        name: aiInfo.name
                    });
                }
                info &&
                    info.success &&
                    info.success({
                        selfRank: {
                            openid: this.userData.uid,
                            rank: 1,
                            score: 100,
                            avatarUrl: this.userData.avatar,
                            name: this.userData.name
                        },
                        ranks: rankInfos,
                        allSize: rankInfos.length
                    });
                console.warn('getRank 接口只在 Hago 平台生效, 此数据是模拟数据，不具有真实性');
            }
        }
        getUserAccount() {
            SocketManager.Instance.send(RPC.PayQuery);
        }
        gameConsumeProduct(amount) {
            SocketManager.Instance.send(RPC.PayConsumeProduct, { amount: amount });
        }
        createVoiceChannel(channelId) {
            if (this.isHago) {
                return hg.createVoiceChannel({ channelId: channelId });
            }
            else {
                console.warn('createVoiceChannel 接口只在 Hago 平台生效');
                return null;
            }
        }
        getGameUser(uid) {
            return this.gameUserInfos.find((tmpUser) => tmpUser && tmpUser.uid == uid);
        }
        getAiUser(count) {
            if (count == undefined) {
                count = 1;
            }
            let userInfos = [];
            for (let index = 0; index < count; index++) {
                let aiInfo = null;
                do {
                    aiInfo = ConfigManager.getRandomConfig(CJson.AiConfig);
                    if (aiInfo == null) {
                        console.error('请资源加载完成后再获取 ai 数据');
                    }
                } while (aiInfo &&
                    (aiInfo.openid == this.userData.uid ||
                        userInfos.find((tmpAiInfo) => {
                            return tmpAiInfo.uid == aiInfo.openid;
                        })));
                userInfos.push({
                    uid: aiInfo.openid,
                    name: aiInfo.nickName,
                    avatar: aiInfo.avataUrl,
                    lv: 1
                });
            }
            return userInfos;
        }
        showAd(type, callback) {
            if (this.isHago) {
                this.adCallBack = callback;
                switch (type) {
                    case AdType.Video:
                        if (this.rewardedVideoAd == null) {
                            this.rewardedVideoAd = hg.createRewardedVideoAd({
                                adUnitId: GlobalConfig.adUnitId
                            });
                            this.rewardedVideoAd.onClose = (res) => {
                                console.log('hg.rewardedVideoAd.onClose res.isEnded:' + res.isEnded);
                                this.adCallBack && this.adCallBack(res && res.isEnded);
                                this.adCallBack = null;
                            };
                            this.rewardedVideoAd.onError = (res) => {
                                console.log('hg.rewardedVideoAd.onError:', res);
                                this.adCallBack && this.adCallBack(false);
                                this.adCallBack = null;
                            };
                        }
                        this.rewardedVideoAd.show();
                        break;
                    default:
                        break;
                }
            }
            else {
                console.warn('非Hago 平台不支持此接口: showAd');
                callback && callback(true);
            }
        }
    }

    class PKHago extends BaseHago {
        constructor() {
            super(...arguments);
            this.type = HagoGameType.PK;
        }
        initData() {
            super.initData();
            if (this.isHago) {
                this.url = hg.getMatchupUrl();
                let matchUpInfo = hg.getMatchupInfo();
                GlobalConfig.gameId = matchUpInfo.gameid;
                this.roomData = {
                    roomID: matchUpInfo.roomid,
                    gameID: matchUpInfo.gameid,
                    channelID: matchUpInfo.channelid
                };
                if (!String.isNullOrEmpty(matchUpInfo.player.opt)) {
                    let opt = JSON.parse(matchUpInfo.player.opt);
                    hg.getUserInfoByUids({
                        uids: [opt.ai_info.uid],
                        success: (res) => {
                            res.forEach((tmpInfo) => {
                                if (tmpInfo.uid == opt.ai_info.uid) {
                                    this.aiInfo.avatar = tmpInfo.avatar;
                                }
                            });
                        },
                        fail: function (res) {
                        }
                    });
                    this.aiInfo = {
                        uid: opt.ai_info.uid,
                        name: opt.ai_info.nick,
                        avatar: null,
                        lv: opt.level,
                        sex: opt.ai_info.sex,
                        isAI: true,
                        isReady: true
                    };
                    this.isAi = true;
                }
                this.userData = {
                    uid: matchUpInfo.player.uid,
                    name: matchUpInfo.player.name,
                    avatar: matchUpInfo.player.avatarurl,
                    lv: 1,
                    sex: matchUpInfo.player.sex,
                    sign: matchUpInfo.player.kv_sign
                };
                this.isInit = true;
                hg.listenPkExit(() => {
                    let resultInfo = [];
                    this.gameUserInfos.forEach((tmpUserInfo) => {
                        resultInfo.push({
                            score: 0,
                            uid: tmpUserInfo.uid,
                            opt: tmpUserInfo.uid == this.userData.uid ? { runAway: true } : null
                        });
                    });
                    resultInfo.sort((bef, aft) => {
                        if (aft.opt && aft.opt.runAway && (bef.opt == null || bef.opt.runAway == false)) {
                            return -1;
                        }
                        else if (bef.opt && bef.opt.runAway && (aft.opt == null || aft.opt.runAway == false)) {
                            return 1;
                        }
                        else {
                            return bef.score > aft.score ? -1 : bef.score == aft.score ? 0 : 1;
                        }
                    });
                    let reportInfo = this.getReportInfo(resultInfo);
                    hg.pkResult(reportInfo);
                    this.exitRoom();
                });
            }
            else {
                this.url = 'ws://123.207.170.1:8888';
                this.isAi = true;
                this.roomData = {
                    channelID: 'yy',
                    gameID: GlobalConfig.gameId
                };
                let interval = setInterval(() => {
                    if (MD5 != null) {
                        this.roomData.roomID = MD5(Math.round(Date.now() / 10000));
                        this.isInit = true;
                        clearInterval(interval);
                    }
                }, 50);
            }
        }
        onNetEnterRoom(msgs) {
            super.onNetEnterRoom(msgs);
        }
        onNetConnected() {
            let interval = setInterval(() => {
                if (this.isInit) {
                    super.onNetConnected();
                    clearInterval(interval);
                }
            }, 50);
        }
        onNetClosed() {
            if (this.isHago && !this.isOver) {
                hg.pkFinishError({ message: 'connect to server error', code: '100' });
            }
        }
        onNetEnterHall(msgs) {
            console.log('onNetEnterHall:');
            this.gameUserInfos = [];
            this.emit(HagoEvent.EnterHall, msgs);
            if (this.isAi) {
                this.enterRoom({ playerCount: 2, mode: GameMode.Ai });
            }
            else {
                this.enterRoom({ playerCount: 2, mode: GameMode.Friend });
            }
        }
        onNetExitRoom(msgs) {
            this.isOver = true;
            let resultInfo = [];
            this.gameUserInfos.forEach((tmpUserInfo) => {
                resultInfo.push({
                    score: 0,
                    uid: tmpUserInfo.uid,
                    opt: tmpUserInfo.uid == this.userData.uid ? { runAway: true } : null
                });
            });
            resultInfo.sort((bef, aft) => {
                if (aft.opt && aft.opt.runAway && (bef.opt == null || bef.opt.runAway == false)) {
                    return -1;
                }
                else if (bef.opt && bef.opt.runAway && (aft.opt == null || aft.opt.runAway == false)) {
                    return 1;
                }
                else {
                    return bef.score > aft.score ? -1 : bef.score == aft.score ? 0 : 1;
                }
            });
            super.onNetExitRoom(msgs);
            if (this.isHago && msgs.uid == this.userData.uid) {
                hg.exitPkGame();
            }
        }
        onNetStartGame(msgs) {
            if (msgs.error == null && this.isHago) {
                hg.pkStart();
            }
            else if (msgs.error != null && this.isHago) {
                hg.pkFinishError();
            }
            super.onNetStartGame(msgs);
        }
        onNetOverGame(msgs) {
            super.onNetOverGame(msgs);
            if (this.isOver && this.isHago) {
                setTimeout(() => {
                    hg.pkFinish(this.getReportInfo(msgs.resultInfos));
                }, 5000);
                SocketManager.Instance.close();
            }
        }
        enterRoom(info) {
            this.roomData.opt = info.opt;
            this.roomData.mode = info.mode;
            if (info.mode == GameMode.Ai) {
                this.userData.seat = 0;
                let tmpUserInfos = [];
                let selfUserInfo = {
                    uid: this.userData.uid,
                    avatar: this.userData.avatar,
                    lv: this.userData.lv,
                    name: this.userData.name,
                    isAI: false,
                    seat: 0,
                    isReady: false,
                    opt: this.userData.opt
                };
                tmpUserInfos.push(selfUserInfo);
                if (this.aiInfo == null) {
                    this.aiInfo = this.getAiUser(1).pop();
                    this.aiInfo.isAI = true;
                    this.aiInfo.isReady = true;
                }
                this.aiInfo.seat = 1;
                tmpUserInfos.push(this.aiInfo);
                this.onNetEnterRoom({
                    userInfos: tmpUserInfos,
                    hostUID: this.userData.uid,
                    roomId: MD5(Date.now() + Math.random()),
                    opt: info.opt,
                    userInfo: selfUserInfo,
                    timestamp: Date.now(),
                    uid: selfUserInfo.uid
                });
                return;
            }
            SocketManager.Instance.send(RPC.EnterRoom, {
                roomData: this.roomData,
                userData: this.userData,
                info: info,
                type: this.type
            });
        }
        getReportInfo(resultInfos) {
            let users = [];
            let winners = [];
            let resultType = 'draw';
            if (!this.isStart) {
                resultType = 'notstart';
            }
            else {
                let tmpScore = -1;
                resultInfos.forEach((tmpUserInfo, index) => {
                    if (tmpScore == -1) {
                        tmpScore = tmpUserInfo.score;
                    }
                    if (tmpScore != tmpUserInfo.score || (tmpUserInfo.opt && tmpUserInfo.opt.runAway)) {
                        resultType = 'not_draw';
                    }
                });
            }
            resultInfos.forEach((tmpUserInfo, index) => {
                users.push(tmpUserInfo.uid);
                if (index == 0) {
                    winners.push(tmpUserInfo.uid);
                }
            });
            if (resultType == 'draw') {
                winners = [];
            }
            let reportInfo = {
                timestamp: Math.floor(Date.now() / 1000),
                nonstr: this.randomStr(),
                gametype: '1v1_pk',
                sign: null,
                result: {
                    gameid: GlobalConfig.gameId,
                    roomid: this.roomData.roomID,
                    channelid: this.roomData.channelID,
                    resulttype: resultType,
                    users: users,
                    winners: winners
                }
            };
            let signStr = `${reportInfo.timestamp}${reportInfo.nonstr}${JSON.stringify(reportInfo.result)}${reportInfo.gametype}${GlobalConfig.appKey}`;
            reportInfo.sign = sha1(signStr);
            return reportInfo;
        }
        randomStr(len) {
            len = len || 32;
            var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';
            var maxPos = $chars.length;
            var pwd = '';
            for (let i = 0; i < len; i++) {
                pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
            }
            return pwd;
        }
        forceExit(uid) {
            console.warn(' PK 类游戏 不能踢人');
        }
    }

    class JOHago extends BaseHago {
        constructor() {
            super(...arguments);
            this.type = HagoGameType.JO;
        }
        initData() {
            super.initData();
            if (this.isHago) {
                this.url = hg.getSubModuleUrlSync({ id: GlobalConfig.serverId }).url;
                this.userData.uid = hg.getUid();
                this.roomData = {};
                hg.getUserInfo({
                    success: (res) => {
                        this.userData.name = res.userInfo.nickName;
                        this.userData.avatar = res.userInfo.avatarUrl;
                        this.userData.openid = res.userInfo.openid;
                        this.isInit = true;
                    }
                });
            }
            else {
                this.url = 'ws://123.207.170.1:8888';
                this.roomData = {};
            }
            console.log(this.url);
            this.updateCloseView({ show: false });
        }
        onNetEnterRoom(msgs) {
            super.onNetEnterRoom(msgs);
        }
        onNetConnected() {
            console.log('onNetConnected:');
            let interval = setInterval(() => {
                if (this.isInit) {
                    super.onNetConnected();
                    clearInterval(interval);
                }
            }, 50);
        }
    }

    var GameState;
    (function (GameState) {
        GameState[GameState["None"] = 0] = "None";
        GameState[GameState["Ready"] = 1] = "Ready";
        GameState[GameState["Start"] = 2] = "Start";
        GameState[GameState["Normal"] = 3] = "Normal";
        GameState[GameState["Over"] = 4] = "Over";
    })(GameState || (GameState = {}));
    class LCHago {
        static get userData() {
            return this.iHago ? this.iHago.userData : null;
        }
        static get systemTime() {
            return this.iHago ? this.iHago.systemTime : 0;
        }
        static get startTime() {
            return this.iHago ? this.iHago.startTime : 0;
        }
        static get gameUserInfos() {
            return this.iHago ? this.iHago.gameUserInfos : [];
        }
        static get roomData() {
            return this.iHago ? this.iHago.roomData : null;
        }
        static get friendInfos() {
            return this.iHago ? this.iHago.friendInfos : null;
        }
        static get isHago() {
            return this.iHago ? this.iHago.isHago : false;
        }
        static get pings() {
            return SocketManager.Instance.pings;
        }
        static get inviteInfo() {
            return this.iHago ? this.iHago.inviteInfo : null;
        }
        static init(type = HagoGameType.PK) {
            switch (type) {
                case HagoGameType.PK:
                    this.iHago = new PKHago();
                    break;
                case HagoGameType.JO:
                    this.iHago = new JOHago();
                default:
                    break;
            }
            this.type = type;
        }
        static connect() {
            if (this.iHago) {
                this.iHago.connect();
            }
        }
        static reConnect() {
            if (this.iHago) {
                this.iHago.reConnect();
            }
        }
        static enterRoom(info = { playerCount: 2, mode: 1 }) {
            if (this.iHago) {
                this.iHago.enterRoom(info);
            }
        }
        static exitRoom() {
            if (this.iHago) {
                this.iHago.exitRoom();
            }
        }
        static readyGame() {
            if (this.iHago) {
                this.iHago.readyGame();
            }
        }
        static overGame(resultInfo) {
            if (this.iHago) {
                this.iHago.overGame(resultInfo);
            }
        }
        static custom(msgs) {
            if (this.iHago) {
                this.iHago.custom(msgs);
            }
        }
        static rePlay(msgs = {}) {
            if (this.iHago) {
                this.iHago.rePlay(msgs);
            }
        }
        static exitGame(options = { exitConfirm: true }) {
            if (this.iHago) {
                this.iHago.exitGame(options);
            }
        }
        static forceExit(uid) {
            if (this.iHago) {
                this.iHago.forceExit(uid);
            }
        }
        static gameLoaded() {
            if (this.iHago) {
                this.iHago.gameLoaded();
            }
        }
        static on(event, method, caller) {
            if (this.iHago) {
                this.iHago.on(event, method, caller);
            }
        }
        static off(event, method, caller) {
            if (this.iHago) {
                this.iHago.off(event, method, caller);
            }
        }
        static emit(event, msgs = undefined) {
            if (this.iHago) {
                this.iHago.emit(event, msgs);
            }
        }
        static getSystemInfoSync() {
            if (this.iHago && this.iHago.isHago) {
                return hg.getSystemInfoSync();
            }
            else {
                return null;
            }
        }
        static vibrate(time = 200) {
            if (navigator && navigator.vibrate) {
                navigator.vibrate(time);
            }
        }
        static updateCloseView(obj = { show: true, position: 1 }) {
            if (this.iHago) {
                this.iHago.updateCloseView(obj);
            }
        }
        static getData(keys, callback) {
            if (this.iHago) {
                this.iHago.getData(keys, callback);
            }
        }
        static saveData(data, callback) {
            if (this.iHago) {
                this.iHago.saveData(data, callback);
            }
        }
        static clearData(keyList, callback) {
            if (this.iHago) {
                this.iHago.clearData(keyList, callback);
            }
        }
        static getFriendInfos(callback) {
            if (this.iHago) {
                this.iHago.getFriendInfos(callback);
            }
        }
        static addFriend(uid, callback) {
            if (this.iHago) {
                this.iHago.addFriend(uid, callback);
            }
        }
        static getFriendCloudStorage(keys, callback) {
            if (this.iHago) {
                this.iHago.getFriendCloudStorage(keys, callback);
            }
        }
        static showUserCard(uid) {
            if (this.iHago) {
                this.iHago.showUserCard(uid);
            }
        }
        static sendMsgInGame(msgs) {
            if (this.iHago) {
                this.iHago.sendMsgInGame(msgs);
            }
        }
        static setRank(info) {
            if (this.iHago) {
                this.iHago.setRank(info);
            }
        }
        static getRank(info) {
            if (this.iHago) {
                this.iHago.getRank(info);
            }
        }
        static getUserAccount() {
            if (this.iHago) {
                this.iHago.getUserAccount();
            }
        }
        static gameConsumeProduct(amount) {
            if (this.iHago) {
                this.iHago.gameConsumeProduct(amount);
            }
        }
        static createVoiceChannel(channelId) {
            if (this.iHago) {
                return this.iHago.createVoiceChannel(channelId);
            }
            else {
                return null;
            }
        }
        static getGameUser(uid) {
            if (this.iHago) {
                return this.iHago.getGameUser(uid);
            }
            else {
                return null;
            }
        }
        static showAd(type, callback) {
            if (this.iHago) {
                this.iHago.showAd(type, callback);
            }
            else {
                console.warn('非Hago 平台不支持此接口: showAd');
            }
        }
    }
    LCHago.iHago = null;
    LCHago.type = HagoGameType.JO;

    var saveKeyList = [];
    var handler = {
        set: function (target, key, value, receiver) {
            target[key] = value;
            if (saveKeyList.indexOf(key) == -1) {
                saveKeyList.push(key);
            }
            EventManager.emit('UpdateGameData', key);
            return true;
        }
    };
    class GameDataManager {
        constructor() {
            this.lv = 0;
            this.uid = '';
            this.isMusic = true;
            this.isSound = true;
            this.isVibrate = true;
            this.isLoaded = false;
            this.coin = 0;
            this.levelId = 0;
            this.speedLv = 0;
            this.launchLv = 0;
            this.hiveLv = 0;
            this.speed = 0.05;
            this.launch = 1;
            this.beeSkins = [0, -1, -1, -1, -1];
            this.hiveSkins = [0, -1, -1, -1];
            this.tasks = [0, 1, 2];
            this.completeTasks = [-1, -1, -1];
            this.passLv = 0;
            this.headKillCount = 0;
            this.quitTime = 0;
            this.taskTime = 86400;
            this.keyCount = 0;
            this.sliderValue = 0;
            this.taskDot = false;
            this.skinDot = false;
            this.beeSkin = 0;
            this.hiveSkin = 0;
            this.sumSkin = 0;
        }
        static get Instance() {
            if (this.sInstance == null) {
                this.sInstance = new GameDataManager();
                this.sInstance = new Proxy(this.sInstance, handler);
            }
            return this.sInstance;
        }
        refreshKey(key) {
            if (saveKeyList.indexOf(key) == -1) {
                saveKeyList.push(key);
            }
        }
        saveData(isForce = false, callback) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.isLoaded) {
                    console.warn('数据还未获取到, 不能保存数据');
                    return;
                }
                let data = [];
                for (const key in this) {
                    if (saveKeyList.indexOf(key) != -1 || isForce) {
                        let value = typeof this[key] == 'object' ? JSON.stringify(this[key]) : this[key].toString();
                        data.push({ key: key, value: value });
                    }
                }
                yield new Promise((resolve, reject) => {
                    LCHago.saveData(data, (err) => {
                        if (err) {
                            callback && callback(err);
                        }
                        else {
                            saveKeyList = [];
                            callback && callback();
                        }
                        resolve();
                    });
                });
            });
        }
        clearData(keyList, callback) {
            return __awaiter(this, void 0, void 0, function* () {
                if (keyList == null) {
                    keyList = [];
                    for (const key in this) {
                        if (this.hasOwnProperty(key)) {
                            keyList.push(key);
                        }
                    }
                }
                yield new Promise((resolve, reject) => {
                    LCHago.clearData(keyList, (isSuccess) => {
                        callback && callback(isSuccess);
                        resolve();
                    });
                });
            });
        }
        loadData(callback) {
            return __awaiter(this, void 0, void 0, function* () {
                let keys = [];
                for (const key in this) {
                    if (this.hasOwnProperty(key)) {
                        keys.push(key);
                    }
                }
                yield new Promise((resolve, reject) => {
                    LCHago.getData(keys, (res, err) => {
                        if (res != null) {
                            res.forEach((data) => {
                                if (String.isNullOrEmpty(data.value)) {
                                    return;
                                }
                                if (typeof this[data.key] == 'boolean') {
                                    this[data.key] = data.value.bool();
                                }
                                else if (typeof this[data.key] == 'number') {
                                    this[data.key] = data.value.number();
                                }
                                else if (typeof this[data.key] == 'object') {
                                    this[data.key] = JSON.parseRecursion(data.value);
                                }
                                else {
                                    this[data.key] = data.value;
                                }
                            });
                            this.uid = '';
                            if (this.uid.empty()) {
                                this.uid = this.generateUUID();
                            }
                        }
                        saveKeyList = [];
                        if (err != null) {
                            this.isLoaded = false;
                            reject();
                            callback && callback(err);
                        }
                        else {
                            this.isLoaded = true;
                            resolve();
                            callback && callback();
                        }
                    });
                });
            });
        }
        generateUUID() {
            var d = Date.now() + performance.now();
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = ((d + Math.random() * 16) % 16) | 0;
                d = Math.floor(d / 16);
                return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
            });
        }
    }

    class SoundManager {
        static playSound(soundId, loops = 1) {
            if (!GameDataManager.Instance.isMusic) {
                return;
            }
            switch (soundId) {
                case SoundId.BeeWings:
                    Laya.SoundManager.playSound('sounds/BeeWings.wav', loops);
                    break;
                case SoundId.GameFail:
                    Laya.SoundManager.playSound('sounds/GameFail.wav', loops);
                    break;
                case SoundId.GameWin:
                    Laya.SoundManager.playSound('sounds/GameWin.wav', loops);
                    break;
                case SoundId.ManDied:
                    Laya.SoundManager.playSound('sounds/ManDied.wav', loops);
                    break;
                case SoundId.WomanDied:
                    Laya.SoundManager.playSound('sounds/WomanDied.wav', loops);
                    break;
                case SoundId.UiClick:
                    Laya.SoundManager.playSound('sounds/UiClick.wav', loops);
                    break;
                case SoundId.EatKey:
                    Laya.SoundManager.playSound('sounds/EatKey.wav', loops);
                    break;
                case SoundId.FirstBlood:
                    Laya.SoundManager.playSound('sounds/FirstBlood.wav', loops);
                    break;
                case SoundId.DoubleKill:
                    Laya.SoundManager.playSound('sounds/DoubleKill.wav', loops);
                    break;
                case SoundId.TripleKill:
                    Laya.SoundManager.playSound('sounds/TripleKill.wav', loops);
                    break;
                case SoundId.QuadraKill:
                    Laya.SoundManager.playSound('sounds/QuadraKill.wav', loops);
                    break;
                case SoundId.PentaKill:
                    Laya.SoundManager.playSound('sounds/PentaKill.wav', loops);
                    break;
                case SoundId.ACE:
                    Laya.SoundManager.playSound('sounds/ACE.wav', loops);
                    break;
                default:
                    break;
            }
        }
        static playBGM(soundId) {
            if (!GameDataManager.Instance.isMusic) {
                return;
            }
            switch (soundId) {
                case SoundId.BGM:
                    Laya.SoundManager.playMusic('sounds/BGM.wav');
                    break;
                default:
                    break;
            }
        }
        static stopSound(soundId) {
            switch (soundId) {
                case SoundId.BGM:
                    Laya.SoundManager.stopSound('sounds/BGM.wav');
                    break;
                case SoundId.BeeWings:
                    Laya.SoundManager.stopSound('sounds/BeeWings.wav');
                    break;
                case SoundId.GameFail:
                    Laya.SoundManager.stopSound('sounds/GameFail.wav');
                    break;
                case SoundId.GameWin:
                    Laya.SoundManager.stopSound('sounds/GameWin.wav');
                    break;
                case SoundId.ManDied:
                    Laya.SoundManager.stopSound('sounds/ManDied.wav');
                    break;
                case SoundId.WomanDied:
                    Laya.SoundManager.stopSound('sounds/WomanDied.wav');
                    break;
                case SoundId.UiClick:
                    Laya.SoundManager.stopSound('sounds/UiClick.wav');
                    break;
                case SoundId.EatKey:
                    Laya.SoundManager.playSound('sounds/EatKey.wav');
                    break;
                case SoundId.FirstBlood:
                    Laya.SoundManager.playSound('sounds/FirstBlood.wav');
                    break;
                case SoundId.DoubleKill:
                    Laya.SoundManager.playSound('sounds/DoubleKill.wav');
                    break;
                case SoundId.TripleKill:
                    Laya.SoundManager.playSound('sounds/TripleKill.wav');
                    break;
                case SoundId.QuadraKill:
                    Laya.SoundManager.playSound('sounds/QuadraKill.wav');
                    break;
                case SoundId.PentaKill:
                    Laya.SoundManager.playSound('sounds/PentaKill.wav');
                    break;
                case SoundId.ACE:
                    Laya.SoundManager.playSound('sounds/ACE.wav');
                    break;
                default:
                    break;
            }
        }
        static vibrate() {
            if (GameDataManager.Instance.isVibrate) {
                navigator.vibrate(200);
            }
        }
    }
    window['SoundManager'] = SoundManager;

    class UIBaseView extends Laya.View {
        constructor() {
            super(...arguments);
            this.isLoaded = false;
            this.params = null;
        }
        static init() {
            Laya.UIBaseView = UIBaseView;
        }
        onAwake() {
            this.top = 0;
            this.right = 0;
            this.left = 0;
            this.bottom = 0;
            super.onAwake();
            this.isLoaded = true;
            this.initEvent();
            if (this['animShow'] && this['animShow'] instanceof Laya.FrameAnimation) {
                this['animShow'].gotoAndStop(0);
            }
        }
        onShow(params) {
            this.params = params;
            if (this['onUpdate']) {
                Laya.timer.frameLoop(1, this, this['onUpdate']);
            }
            if (this['animShow'] && this['animShow'] instanceof Laya.FrameAnimation) {
                this['animShow'].gotoAndStop(0);
                this['animShow'].play(0, false);
            }
            this.visible = true;
        }
        onHide(callback) {
            if (this['onUpdate']) {
                Laya.timer.clear(this, this['onUpdate']);
            }
            if (this['animHide'] && this['animHide'] instanceof Laya.FrameAnimation) {
                this['animHide'].gotoAndStop(0);
                this['animHide'].play(0, false);
                let interval = setInterval(() => {
                    if (this['animHide'].index >=
                        this['animHide'].count - 1) {
                        clearInterval(interval);
                        interval = null;
                        this.visible = false;
                        callback && callback();
                    }
                }, 100);
            }
            else {
                this.visible = false;
                callback && callback();
            }
        }
        initEvent() {
            for (const key in this) {
                if (this.hasOwnProperty(key) && this[key] instanceof Laya.Button) {
                    let btn = this[key];
                    btn.on(Laya.Event.MOUSE_DOWN, this, (ev) => {
                        if (ev.target['stateNum'] != 1) {
                            this.onBtnClick(ev);
                            return;
                        }
                        if (btn['isDowning'] || btn['isUping']) {
                            return;
                        }
                        btn['isDowning'] = true;
                        Laya.Tween.to(ev.target, { scaleX: 0.8, scaleY: 0.8 }, 100);
                    });
                    btn.on(Laya.Event.MOUSE_UP, this, (ev) => {
                        if (ev.target['stateNum'] != 1) {
                            return;
                        }
                        if (!btn['isDowning'] || btn['isUping']) {
                            return;
                        }
                        btn['isDowning'] = false;
                        btn['isUping'] = true;
                        Laya.Tween.to(ev.target, {
                            scaleX: 1,
                            scaleY: 1,
                            complete: Laya.Handler.create(this, () => {
                                this.onBtnClick(ev);
                                btn['isDowning'] = false;
                                btn['isUping'] = false;
                            })
                        }, 100);
                    });
                    btn.on(Laya.Event.MOUSE_OUT, this, (ev) => {
                        if (ev.target['stateNum'] != 1) {
                            return;
                        }
                        if (!btn['isDowning'] || btn['isUping']) {
                            return;
                        }
                        btn['isDowning'] = false;
                        btn['isUping'] = true;
                        Laya.Tween.to(ev.target, {
                            scaleX: 1,
                            scaleY: 1,
                            complete: Laya.Handler.create(this, () => {
                                btn['isDowning'] = false;
                                btn['isUping'] = false;
                            })
                        }, 100);
                    });
                }
            }
        }
        onBtnClick(ev) {
            ev.stopPropagation();
            SoundManager.playSound(SoundId.UiClick);
        }
    }

    class Base2DEntity extends Laya.View {
        reUse(info) { }
        unUse() { }
        static init() {
            Laya.Base2DEntity = Base2DEntity;
        }
    }

    var Scene = Laya.Scene;
    UIBaseView.init();
    Base2DEntity.init();
    var REG = Laya.ClassUtils.regClass;
    var ui;
    (function (ui) {
        class AppUI extends Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("App");
            }
        }
        ui.AppUI = AppUI;
        REG("ui.AppUI", AppUI);
    })(ui || (ui = {}));
    (function (ui) {
        var UIs;
        (function (UIs) {
            class CoinUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Coin");
                }
            }
            UIs.CoinUI = CoinUI;
            REG("ui.UIs.CoinUI", CoinUI);
            class DialogUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Dialog");
                }
            }
            UIs.DialogUI = DialogUI;
            REG("ui.UIs.DialogUI", DialogUI);
            class ExitUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Exit");
                }
            }
            UIs.ExitUI = ExitUI;
            REG("ui.UIs.ExitUI", ExitUI);
            class GameUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Game");
                }
            }
            UIs.GameUI = GameUI;
            REG("ui.UIs.GameUI", GameUI);
            class GetBeeUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/GetBee");
                }
            }
            UIs.GetBeeUI = GetBeeUI;
            REG("ui.UIs.GetBeeUI", GetBeeUI);
            class GiftUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Gift");
                }
            }
            UIs.GiftUI = GiftUI;
            REG("ui.UIs.GiftUI", GiftUI);
            class HallUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Hall");
                }
            }
            UIs.HallUI = HallUI;
            REG("ui.UIs.HallUI", HallUI);
            class HiveUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Hive");
                }
            }
            UIs.HiveUI = HiveUI;
            REG("ui.UIs.HiveUI", HiveUI);
            class MatchUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Match");
                }
            }
            UIs.MatchUI = MatchUI;
            REG("ui.UIs.MatchUI", MatchUI);
            class ResultUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Result");
                }
            }
            UIs.ResultUI = ResultUI;
            REG("ui.UIs.ResultUI", ResultUI);
            class SkinUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Skin");
                }
            }
            UIs.SkinUI = SkinUI;
            REG("ui.UIs.SkinUI", SkinUI);
            class TaskUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Task");
                }
            }
            UIs.TaskUI = TaskUI;
            REG("ui.UIs.TaskUI", TaskUI);
            class TipUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Tip");
                }
            }
            UIs.TipUI = TipUI;
            REG("ui.UIs.TipUI", TipUI);
            class TopUI extends Laya.UIBaseView {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("UIs/Top");
                }
            }
            UIs.TopUI = TopUI;
            REG("ui.UIs.TopUI", TopUI);
        })(UIs = ui.UIs || (ui.UIs = {}));
    })(ui || (ui = {}));

    class Global {
    }
    Global.isOver = false;
    Global.peoples = [];
    Global.targetCount = 0;
    Global.target = 0;
    Global.aims = [];
    Global.scaleAim = 1;
    Global.keys = [];
    Global.beeSkins = [0, 1, 2, 3, 4];
    Global.hiveSkins = [0, 1, 2, 3];
    Global.beeTips = ['+0%', '+5%', '+10%', '+15%', '+20%'];
    Global.hiveTips = ['+0%', '+5%', '+10%', '+15%'];
    Global.gameAverageTime = 0;
    Global.isGetKey = false;

    class PeopleCtrl extends Laya.Script3D {
        constructor() {
            super();
            this.timeLine = null;
            this.isDead = false;
            this.t = null;
            this.nickName = null;
            this.isMan = false;
            this.ren = null;
            this.yifu = null;
            this.yifuAni = null;
        }
        onAwake() {
            let go = this.owner.getChildAt(0);
            this.ani = go.getComponent(Laya.Animator);
            this.head = this.owner.parent.getChildByName('head');
            let nick = this.ani.owner.name;
            this.nickName = [];
            this.nickName = nick.split('_');
            if (this.nickName[1] == 'man') {
                this.isMan = true;
            }
            this.initAni();
        }
        playDead(id) {
            if (this.t != null) {
                clearInterval(this.t);
                this.t = null;
            }
            Laya.Tween.clearAll(this.owner.parent.transform);
            if (this.ani != null) {
                if (this.nickName[0] == 'stand0' && this.yifu) {
                    this.yifu.active = true;
                    this.yifuAni.play('1', 0, 0);
                    this.ani.owner.active = false;
                    this.ren.active = true;
                    this.ren.getComponent(Laya.Animator).play('die_01', 0, 0);
                }
                if (id == 0) {
                    this.ani.crossFade('die_01', 0, 0, 0);
                }
                else if (id == 1) {
                    this.ani.crossFade('die_01', 0, 0, 0);
                }
                else if (id == 2) {
                    this.ani.crossFade('die_01', 0, 0, 0);
                }
                else if (id == 3) {
                    this.ani.crossFade('die_01', 0, 0, 0);
                }
            }
            if (this.isMan) {
                SoundManager.playSound(SoundId.ManDied);
            }
            else {
                SoundManager.playSound(SoundId.WomanDied);
            }
        }
        initAni() {
            this.yifu = this.owner.parent.getChildByName('yifu');
            if (this.yifu != null) {
                this.yifu.active = false;
                this.yifuAni = this.yifu.getComponent(Laya.Animator);
                this.yifuAni.play('yifu_idle', 0, 0);
            }
            this.ren = this.owner.getChildByName('ren');
            if (this.ren != null) {
                this.ren.active = false;
            }
            this.ani.owner.active = true;
            this.isDead = false;
            if (this.ani != null) {
                if (this.nickName[0] == 'dance') {
                    this.ani.play('dance', 0, 0);
                }
                else if (this.nickName[0] == 'stand') {
                    this.ani.play('stand', 0, 0);
                }
                else if (this.nickName[0] == 'stand1') {
                    this.ani.play('stand1', 0, 0);
                }
                else if (this.nickName[0] == 'stand2') {
                    this.ani.play('stand2', 0, 0);
                }
                else if (this.nickName[0] == 'walk') {
                    this.ani.play('walk', 0, 0);
                    this.walk();
                }
                else if (this.nickName[0] == 'stand0') {
                    let r = Math.random();
                    if (r > 0.5) {
                        this.ani.play('Idle', 0, 0);
                    }
                    else {
                        this.ani.play('Idle1', 0, 0);
                    }
                }
            }
        }
        walk() {
        }
    }

    class KeyCtrl extends Laya.Script3D {
        constructor() {
            super();
        }
        onAwake() {
            this.key = this.owner.getChildAt(0);
        }
        onUpdate() {
            this.key.transform.localRotationEulerX += 0.5;
            this.key.transform.localRotationEulerY += 0.5;
        }
    }

    let CUI = {
        HallUI: {
            class: 'UIs/Halls/HallUI.ts',
            name: 'HallUI'
        },
        GameUI: {
            class: 'UIs/Games/GameUI.ts',
            name: 'GameUI'
        },
        MatchUI: {
            class: 'UIs/Matchs/MatchUI.ts',
            name: 'MatchUI'
        },
        DialogUI: {
            class: 'UIs/Dialogs/DialogUI.ts',
            name: 'DialogUI'
        },
        ResultUI: {
            class: 'UIs/Results/ResultUI.ts',
            name: 'ResultUI'
        },
        TopUI: {
            class: 'UIs/Top/TopUI.ts',
            name: 'TopUI'
        },
        HiveUI: {
            class: 'UIs/Hive/HiveUI.ts',
            name: 'HiveUI'
        },
        SkinUI: {
            class: 'UIs/Skin/SkinUI.ts',
            name: 'SkinUI'
        },
        TaskUI: {
            class: 'UIs/Task/TaskUI.ts',
            name: 'TaskUI'
        },
        CoinUI: {
            class: 'UIs/Coin/CoinUI.ts',
            name: 'CoinUI'
        },
        GiftUI: {
            class: 'UIs/Gift/GiftUI.ts',
            name: 'GiftUI'
        },
        GetBeeUI: {
            class: 'UIs/GetBee/GetBeeUI.ts',
            name: 'GetBeeUI'
        },
        ExitUI: {
            class: 'UIs/Exit/ExitUI.ts',
            name: 'ExitUI'
        },
        TipUI: {
            class: 'UIs/Tip/TipUI.ts',
            name: 'TipUI'
        }
    };

    class UIManager {
        constructor() {
            this.uis = [];
        }
        static get Instance() {
            if (this.sInstance == null) {
                this.sInstance = new UIManager();
            }
            return this.sInstance;
        }
        loadUI() {
            for (const key in CUI) {
                if (typeof CUI[key] == 'object') {
                    let clas = Laya.ClassUtils.getClass(CUI[key].class);
                    if (clas == null) {
                        continue;
                    }
                    let ui = new (Laya.ClassUtils.getClass(CUI[key].class))();
                    Laya.stage.addChild(ui);
                    this.uis.push(ui);
                    ui.visible = false;
                }
            }
        }
        showUI(typeOrClassName, params = null, zOrder) {
            if (zOrder === undefined) {
                let maxZOrder = 0;
                this.uis.forEach((tmpUI) => {
                    if (tmpUI.visible && tmpUI.zOrder > maxZOrder && tmpUI.zOrder < 200) {
                        maxZOrder = tmpUI.zOrder;
                    }
                });
                zOrder = maxZOrder + 1;
            }
            let ui = this.getUI(typeOrClassName);
            if (ui == null) {
                if (typeof typeOrClassName == 'function') {
                    ui = new typeOrClassName();
                }
                else if (typeof typeOrClassName == 'object') {
                    ui = new (Laya.ClassUtils.getClass(typeOrClassName.class))();
                }
                Laya.stage.addChild(ui);
                this.uis.push(ui);
            }
            if (ui) {
                ui.zOrder = zOrder;
                ui.visible = true;
            }
            let loopFunction = () => {
                if (ui.isLoaded) {
                    ui.onShow(params);
                    Laya.timer.clear(this, loopFunction);
                }
            };
            Laya.timer.frameLoop(1, this, loopFunction);
        }
        getUI(typeOrClassName) {
            let ui = null;
            let constructor = this.getConstructor(typeOrClassName);
            for (const tmpUI of this.uis) {
                if (tmpUI['constructor'] == constructor) {
                    ui = tmpUI;
                    break;
                }
            }
            return ui ? ui : null;
        }
        hideUI(typeOrClassName, callback) {
            let ui = this.getUI(typeOrClassName);
            if (ui != null) {
                ui.onHide(callback);
            }
        }
        destroyUI(typeOrClassName) {
            let ui = this.getUI(typeOrClassName);
            if (ui != null) {
                ui.close();
                ui.destroy(true);
            }
        }
        isShow(typeOrClassName) {
            let ui = this.getUI(typeOrClassName);
            return ui && ui.visible;
        }
        getConstructor(typeOrClassName) {
            if (!typeOrClassName) {
                return null;
            }
            if (typeof typeOrClassName === 'function') {
                return typeOrClassName;
            }
            else if (typeof typeOrClassName == 'object') {
                return Laya.ClassUtils.getRegClass(typeOrClassName.class);
            }
        }
        applayFilter(sp, strength = 5) {
            let blurFilter = new Laya.BlurFilter();
            blurFilter.strength = strength;
            sp.filters = [blurFilter];
        }
    }
    UIManager.sInstance = null;

    class BeeHive extends Laya.Script3D {
        constructor() {
            super();
        }
        onAwake() { }
        boom(id) {
            let setIn = null;
            for (let i = 0; i < Global.peoples.length; i++) {
                if (Laya.Vector3.distanceSquared(Global.peoples[i].transform.position, this.owner.transform.position) < 16) {
                    let peopleCtrl = Global.peoples[i].getComponent(PeopleCtrl);
                    if (peopleCtrl.isDead) {
                        return;
                    }
                    peopleCtrl.isDead = true;
                    Global.targetCount++;
                    if (setIn == null) {
                        setIn = setTimeout(() => {
                            if (Global.targetCount == 1) {
                                SoundManager.playSound(SoundId.FirstBlood);
                            }
                            else if (Global.targetCount == 2) {
                                SoundManager.playSound(SoundId.DoubleKill);
                            }
                            else if (Global.targetCount == 3) {
                                SoundManager.playSound(SoundId.TripleKill);
                            }
                            else if (Global.targetCount == 4) {
                                SoundManager.playSound(SoundId.QuadraKill);
                            }
                            else if (Global.targetCount == 5) {
                                SoundManager.playSound(SoundId.PentaKill);
                            }
                            else if (Global.targetCount == 6) {
                                SoundManager.playSound(SoundId.ACE);
                            }
                            clearInterval(setIn);
                            setIn == null;
                        }, 400);
                    }
                    else {
                        clearInterval(setIn);
                        setIn = null;
                        setIn = setTimeout(() => {
                            if (Global.targetCount == 1) {
                                SoundManager.playSound(SoundId.FirstBlood);
                            }
                            else if (Global.targetCount == 2) {
                                SoundManager.playSound(SoundId.DoubleKill);
                            }
                            else if (Global.targetCount == 3) {
                                SoundManager.playSound(SoundId.TripleKill);
                            }
                            else if (Global.targetCount == 4) {
                                SoundManager.playSound(SoundId.QuadraKill);
                            }
                            else if (Global.targetCount == 5) {
                                SoundManager.playSound(SoundId.PentaKill);
                            }
                            else if (Global.targetCount == 6) {
                                SoundManager.playSound(SoundId.ACE);
                            }
                        }, 400);
                    }
                    if (Global.targetCount >= Global.target && !Global.isOver) {
                        Laya.timer.scale = 0.3;
                    }
                    EventManager.emit(EventType.FreshWave);
                    peopleCtrl.playDead(id);
                    let peopleRigid = Global.peoples[i].getComponent(Laya.Rigidbody3D);
                    peopleRigid.isKinematic = false;
                    let pos = new Laya.Vector3(0, 0, 0);
                    Laya.Vector3.subtract(Global.peoples[i].transform.position, this.owner.transform.position, pos);
                    peopleRigid.linearVelocity = new Laya.Vector3(pos.x * 10 * Math.pow(1.005, GameDataManager.Instance.launchLv), pos.y * Math.pow(1.005, GameDataManager.Instance.launchLv), pos.z * 10 * Math.pow(1.005, GameDataManager.Instance.launchLv));
                    let posName = Global.peoples[i].parent.name;
                    if (Global.aims.length > 0) {
                        for (let i = 0; i < Global.aims.length; i++) {
                            if (Global.aims[i].parent.name == posName) {
                                Global.aims.splice(i, 1);
                                break;
                            }
                        }
                    }
                    if (Global.targetCount >= Global.target && !Global.isOver) {
                        Global.isOver = true;
                        EventManager.emit(EventType.EndGame);
                        Global.beeCtrl.getComponent(Laya.Rigidbody3D).linearVelocity = new Laya.Vector3(0, 0, 0);
                        Global.beeCtrl.getComponent(Laya.Rigidbody3D).isKinematic = true;
                        let stopMove = false;
                        Laya.timer.once(1000, this, () => {
                            Laya.timer.scale = 1;
                            stopMove = true;
                            UIManager.Instance.showUI(CUI.ResultUI);
                        });
                        setTimeout(() => {
                            let p = Global.camera.transform.position;
                            Global.camera.removeSelf();
                            Global.scene.addChild(Global.camera);
                            Global.camera.transform.position = p;
                            let t = setInterval(() => {
                                let targetPos = Global.peoples[i].transform.position;
                                Global.camera.transform.lookAt(targetPos, Laya.Vector3.UP, true);
                                if (Laya.Vector3.distanceSquared(targetPos, Global.camera.transform.position) > 100) {
                                    Global.camera.transform.translate(new Laya.Vector3(0, 0, -0.1), true);
                                }
                                if (stopMove) {
                                    clearInterval(t);
                                }
                            }, 10);
                        }, 1000);
                    }
                }
            }
        }
    }

    class SceneManager {
        static init() {
            console.log('SceneManager.init()');
            let scene3D = Laya.Loader.getRes(CScene3D.Game);
            Global.beeCtrl = scene3D.getChildByName('bee');
            Global.camera = Global.beeCtrl.getChildByName('MainCamera');
            Global.pointCamera = Global.beeCtrl.getChildByName('point');
            Global.hiveBg = scene3D.getChildByName('hiveBg');
            Global.hive = scene3D.getChildByName('hive');
            Global.branch = scene3D.getChildByName('branch');
            for (let i = 0; i < Global.hive.numChildren; i++) {
                Global.hive.getChildAt(i).active = false;
            }
            Global.skinCamera = scene3D.getChildByName('skinCamera');
            Global.targetCamera = scene3D.getChildByName('targetCamera');
            Global.targetCamera.cullingMask = 1 << 9;
            Global.targetCamera.active = false;
            Global.hivePoint = scene3D.getChildByName('hivePoint');
            Global.beePoint = scene3D.getChildByName('beePoint');
            Global.smoke = scene3D.getChildByName('smoke');
            Global.smoke.active = false;
            Global.skinCamera.active = false;
            Global.beeCtrl.getChildByName('ani').active = false;
            Global.sceneMgr = scene3D.getChildByName('sceneMgr');
            Global.scene = scene3D;
            Laya.stage.addChild(scene3D);
            this.initGame();
        }
        static vec3() {
            if (Global.aims.length > 0) {
                let min = Number.MAX_VALUE;
                let index = 0;
                for (let i = 0; i < Global.aims.length; i++) {
                    let tempMin = Laya.Vector3.distanceSquared(Global.beeCtrl.transform.position, Global.aims[i].transform.position);
                    if (min > tempMin) {
                        min = tempMin;
                        Global.scaleAim = min;
                        index = i;
                    }
                }
                if (min < 64) {
                    return null;
                }
                let people = Global.aims[index].parent.getChildByName('people');
                if (people.parent.name != Global.targetCamera.parent.parent.name) {
                    Global.targetCamera.removeSelf();
                    people.addChild(Global.targetCamera);
                    Global.targetCamera.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
                    let peopleCtrl = people.getComponent(PeopleCtrl);
                    if (peopleCtrl.nickName[0] == 'stand1' || peopleCtrl.nickName[0] == 'stand2') {
                        Global.targetCamera.transform.localPosition = new Laya.Vector3(0, 0, 1.3);
                    }
                    else {
                        Global.targetCamera.transform.localPosition = new Laya.Vector3(0, 1.3, 1.3);
                    }
                }
                return Global.aims[index].transform.position;
            }
            else {
                return null;
            }
        }
        static initGame() {
            let config = ConfigManager.getConfig(CJson.LevelConfig, GameDataManager.Instance.levelId % 30);
            let curScene = null;
            for (let i = 0; i < Global.sceneMgr.numChildren; i++) {
                if (i == config.scene) {
                    curScene = Global.sceneMgr.getChildAt(i);
                    curScene.active = true;
                }
                else {
                    Global.sceneMgr.getChildAt(i).active = false;
                }
            }
            if (config.scene == 0) {
                Global.scene.skyRenderer.material = Laya.loader.getRes(CMaterial.Sky1);
            }
            else if (config.scene == 1) {
                Global.scene.skyRenderer.material = Laya.loader.getRes(CMaterial.Sky2);
            }
            else if (config.scene == 2) {
                Global.scene.skyRenderer.material = Laya.loader.getRes(CMaterial.Sky3);
            }
            else if (config.scene == 3) {
                Global.scene.skyRenderer.material = Laya.loader.getRes(CMaterial.Sky3);
            }
            Global.target = config.target;
            this.peoples = curScene.getChildByName('peoples');
            let peoplePoint = null;
            let batch = config.batch;
            for (let i = 0; i < this.peoples.numChildren; i++) {
                if (i == batch) {
                    peoplePoint = this.peoples.getChildAt(i);
                    peoplePoint.active = true;
                }
                else {
                    this.peoples.getChildAt(i).active = false;
                }
            }
            Global.peoples = [];
            Global.aims = [];
            for (let i = 0; i < peoplePoint.numChildren; i++) {
                if (i < Global.target) {
                    peoplePoint.getChildAt(i).active = true;
                    let go = peoplePoint.getChildAt(i).getChildByName('people');
                    go.transform.localPosition = new Laya.Vector3(0, 2, 0);
                    go.transform.localRotationEuler = Laya.Vector3.ZERO;
                    go.getComponent(Laya.Rigidbody3D).isKinematic = true;
                    if (go.getComponent(PeopleCtrl) == null) {
                        go.addComponent(PeopleCtrl);
                    }
                    Global.peoples.push(go);
                    let aim = peoplePoint.getChildAt(i).getChildByName('aim');
                    Global.aims.push(aim);
                }
                else {
                    peoplePoint.getChildAt(i).active = false;
                }
            }
            let beeHives = curScene.getChildByName('beeHives');
            for (let i = 0; i < beeHives.numChildren; i++) {
                let beeHive = beeHives.getChildAt(i);
                if (beeHive.getComponent(BeeHive) == null) {
                    beeHive.addComponent(BeeHive);
                }
                if (i == config.batch && config.isHive != 0) {
                    beeHive.active = true;
                }
                else {
                    beeHive.active = false;
                }
            }
            let keyPoint = curScene.getChildByName('KeyPoint');
            for (let i = 0; i < keyPoint.numChildren; i++) {
                let key = keyPoint.getChildAt(i);
                if (key.getComponent(KeyCtrl) == null) {
                    key.addComponent(KeyCtrl);
                }
                if (i == config.batch && config.isKey != 0) {
                    key.active = true;
                }
                else {
                    key.active = false;
                }
            }
        }
        static resetGame() {
            Global.beeCtrl.getComponent(Laya.Rigidbody3D).linearVelocity = new Laya.Vector3(0, 0, 0);
            Global.beeCtrl.transform.localPosition = new Laya.Vector3(0, 5, 0);
            Global.beeCtrl.transform.localRotationEuler = Laya.Vector3.ZERO;
            Global.camera.removeSelf();
            Global.beeCtrl.addChild(Global.camera);
            Global.camera.transform.localPosition = new Laya.Vector3(0, 0, -4);
            Global.camera.transform.localRotationEuler = new Laya.Vector3(0, 180, 0);
            for (let i = 0; i < Global.peoples.length; i++) {
                let rigid = Global.peoples[i].getComponent(Laya.Rigidbody3D);
                rigid.linearVelocity = new Laya.Vector3(0, 0, 0);
                Global.peoples[i].transform.localPosition = new Laya.Vector3(0, 2, 0);
                Global.peoples[i].transform.localRotationEuler = Laya.Vector3.ZERO;
                Global.peoples[i].getComponent(Laya.Rigidbody3D).isKinematic = true;
                let peopleCtrl = Global.peoples[i].getComponent(PeopleCtrl);
                peopleCtrl.initAni();
            }
        }
        static renderToSprite(sp) {
            Global.targetCamera.active = true;
            Global.targetCamera.renderTarget = new Laya.RenderTexture(80, 80);
            Global.targetCamera.renderingOrder = -1;
            Global.targetCamera.clearFlag = Laya.BaseCamera.CLEARFLAG_SKY;
            var rtex = new Laya.Texture(Global.targetCamera.renderTarget, Laya.Texture.DEF_UV);
            sp.graphics.drawTexture(rtex);
        }
        static angle_360(from_, to_) {
            let x = from_.x - to_.x;
            let y = from_.y - to_.y;
            let hypotenuse = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
            let cos = x / hypotenuse;
            let radian = Math.acos(cos);
            let angle = 180 / (Math.PI / radian);
            if (y < 0) {
                angle = -angle;
            }
            else if (y == 0 && x < 0) {
                angle = 180;
            }
            return angle;
        }
        static GetAngle(a, b) {
            b.x -= a.x;
            b.z -= a.z;
            let deltaAngle = 0;
            if (b.x == 0 && b.z == 0) {
                return 0;
            }
            else if (b.x > 0 && b.z > 0) {
                deltaAngle = 0;
            }
            else if (b.x > 0 && b.z == 0) {
                return 90;
            }
            else if (b.x > 0 && b.z < 0) {
                deltaAngle = 180;
            }
            else if (b.x == 0 && b.z < 0) {
                return 180;
            }
            else if (b.x < 0 && b.z < 0) {
                deltaAngle = -180;
            }
            else if (b.x < 0 && b.z == 0) {
                return -90;
            }
            else if (b.x < 0 && b.z > 0) {
                deltaAngle = 0;
            }
            let angle = CMath.rad2Deg(Math.atan(b.x / b.z)) + deltaAngle;
            return angle;
        }
        static IsVisible(go) {
            let camera = Global.camera;
            let outpos = new Laya.Vector4();
            camera.viewport.project(go.transform.position, camera.projectionViewMatrix, outpos);
            if (outpos.z < 1)
                return true;
            return false;
        }
    }

    class Base3DEntity extends Laya.Script3D {
        reUse(info) { }
        unUse() { }
    }

    class PoolManager {
        constructor() {
            this.queue = [];
            this.poolDic = {};
            Laya.timer.frameLoop(1, this, this.dealQueue);
        }
        static get Instance() {
            if (this.sInstance == null) {
                this.sInstance = new PoolManager();
            }
            return this.sInstance;
        }
        static init() {
            this.Instance.parseModels();
            this.Instance.parsePrefabs();
        }
        parseModels() {
        }
        parsePrefabs() {
            for (const key in CPrefab) {
                let prefab = Laya.loader.getRes(CPrefab[key]);
                this.poolDic[CPrefab[key]] = prefab;
            }
        }
        putInfo(info) {
            this.queue.push(info);
        }
        dealQueue() {
            if (this.queue.length > 0) {
                let info = this.queue.shift();
                if (info != null) {
                    this.createObj(info);
                }
            }
        }
        createObj(info) {
            if (info.obj == null) {
                info.callback && info.callback(null);
                return;
            }
            if (typeof info.obj == 'string') {
                let tmpObj = this.getModel(info.obj) || this.getPrefab(info.obj);
                if (tmpObj != null) {
                    info.obj = tmpObj;
                }
                else {
                    info.callback && info.callback(null);
                    return;
                }
            }
            let obj = null;
            let component = null;
            if (info.sign) {
                obj = Laya.Pool.getItemByCreateFun(info.sign, () => {
                    if (info.obj instanceof Laya.Sprite3D) {
                        return info.obj.clone();
                    }
                    else if (info.obj instanceof Laya.Prefab) {
                        return info.obj.create();
                    }
                });
            }
            else {
                if (info.obj instanceof Laya.Sprite3D) {
                    obj = Laya.Sprite3D.instantiate(info.obj);
                }
                else if (info.obj instanceof Laya.Prefab) {
                    obj = info.obj.create();
                }
            }
            if (info.root) {
                info.root.addChild(obj);
            }
            else if (!(obj instanceof Laya.Base2DEntity)) {
                Global.scene.addChild(obj);
            }
            obj.active = true;
            if (info.trans && info.trans instanceof Laya.Vector3) {
                info.trans = { position: info.trans };
            }
            if (info.trans) {
                if (obj instanceof Laya.Sprite3D) {
                    if (info.trans['position']) {
                        if (info.trans['isLocalPos']) {
                            obj.transform.localPosition = info.trans['position'];
                        }
                        else {
                            obj.transform.position = info.trans['position'];
                        }
                    }
                    if (info.trans['rotate']) {
                        if (info.trans['isLocalRotate']) {
                            obj.transform.localRotationEuler = info.trans['rotate'];
                        }
                        else {
                            obj.transform.rotationEuler = info.trans['rotate'];
                        }
                    }
                    if (info.trans['scale']) {
                        obj.transform.setWorldLossyScale(info.trans['scale']);
                    }
                }
                else {
                    if (info.trans['position']) {
                        obj.pos(info.trans['position'].x, info.trans['position'].y);
                    }
                    if (info.trans['rotate']) {
                        obj.rotation = info.trans['rotate'];
                    }
                    if (info.trans['scale']) {
                        obj.scale(info.trans['scale'].x, info.trans['scale'].y);
                    }
                }
            }
            if (obj instanceof Laya.Sprite3D) {
                if (component == null && info.component) {
                    component = obj.getComponent(info.component);
                    if (component == null) {
                        component = obj.addComponent(info.component);
                    }
                }
            }
            else {
                component = obj;
            }
            if (component) {
                component.reUse(info.params);
            }
            if (info.callback) {
                info.callback(component || obj);
            }
        }
        recycleObj(obj) {
            if (obj instanceof Base3DEntity && obj.sign != null) {
                obj.owner.removeSelf();
                obj.unUse();
                Laya.Pool.recover(obj.sign, obj.owner);
            }
            else if (obj instanceof Laya.Base2DEntity && obj.sign != null) {
                obj.removeSelf();
                obj.unUse();
                Laya.Pool.recover(obj.sign, obj);
            }
            else {
                obj.destroy();
            }
        }
        getModel(url) {
            return this.poolDic[url];
        }
        getPrefab(url) {
            return this.poolDic[url];
        }
    }
    PoolManager.sInstance = null;

    class ResManager {
        static preLoadRes() {
            this.downPlfbsAndPlfs(() => {
                for (let key in CJson) {
                    let data = { url: CJson[key], type: Laya.Loader.JSON };
                    this.preloadResList.push(data);
                }
                for (let key in CScene3D) {
                    let data = { url: CScene3D[key], type: Laya.Loader.HIERARCHY };
                    this.preloadResList.push(data);
                }
                for (let key in CSprite3D) {
                    let data = { url: CSprite3D[key], type: Laya.Loader.HIERARCHY };
                    this.preloadResList.push(data);
                }
                for (const key in CTexture) {
                    let data = { url: CTexture[key], type: Laya.Loader.TEXTURE2D };
                    this.preloadResList.push(data);
                }
                for (const key in CSound) {
                    let data = { url: CSound[key], type: Laya.Loader.SOUND };
                    this.preloadResList.push(data);
                }
                for (const key in CPrefab) {
                    if (CPrefab.hasOwnProperty(key)) {
                        let data = { url: CPrefab[key], type: Laya.Loader.PREFAB };
                        this.preloadResList.push(data);
                    }
                }
                for (const key in CBin) {
                    if (CBin.hasOwnProperty(key)) {
                        let data = { url: CBin[key], type: Laya.Loader.BUFFER };
                        this.preloadResList.push(data);
                    }
                }
                for (const key in CAtlas) {
                    if (CAtlas.hasOwnProperty(key)) {
                        let data = { url: CAtlas[key], type: Laya.Loader.ATLAS };
                        this.preloadResList.push(data);
                    }
                }
                for (const key in CMaterial) {
                    if (CMaterial.hasOwnProperty(key)) {
                        let data = { url: CMaterial[key], type: Laya.Loader.MATERIAL };
                        this.preloadResList.push(data);
                    }
                }
                for (const key in CFont) {
                    if (CFont.hasOwnProperty(key)) {
                        let data = { url: CFont[key], type: Laya.Loader.FONT };
                        this.preloadResList.push(data);
                    }
                }
                for (const key in CImage) {
                    if (CImage.hasOwnProperty(key)) {
                        let data = { url: CImage[key], type: Laya.Loader.IMAGE };
                        this.preloadResList.push(data);
                    }
                }
                EventManager.once(EventType.LoadingSuccess, this, this.launchGame);
                Laya.timer.frameOnce(1, this, () => {
                    if (this.preloadResList.length == 0) {
                        this.onLoadSuccess(true);
                        this.onPreLoadProgress(1);
                    }
                    else {
                        Laya.loader.create(this.preloadResList, Laya.Handler.create(this, this.onLoadSuccess), Laya.Handler.create(this, (value) => {
                            this.onPreLoadProgress(0.5 + value / 2);
                        }));
                    }
                });
            });
        }
        static downPlfbsAndPlfs(callback) {
            let downUrls = [];
            for (const key in CPlfb) {
                if (CPlfb.hasOwnProperty(key)) {
                    let data = { url: CPlfb[key], type: Laya.Loader.PLFB };
                    downUrls.push(data);
                }
            }
            for (const key in CPlf) {
                if (CPlf.hasOwnProperty(key)) {
                    let data = { url: CPlf[key], type: Laya.Loader.PLF };
                    downUrls.push(data);
                }
            }
            if (downUrls.length > 0) {
                Laya.loader.create(downUrls, Laya.Handler.create(this, callback), Laya.Handler.create(this, (value) => {
                    this.onPreLoadProgress(value / 2);
                }));
            }
            else {
                this.onPreLoadProgress(0.5);
                callback && callback();
            }
        }
        static onLoadSuccess(isSuccess) {
            this.progress = 1;
            console.log('加载成功');
            EventManager.emit(EventType.LoadingSuccess);
        }
        static onPreLoadProgress(value) {
            this.progress = value;
            EventManager.emit(EventType.ResProgress, value);
        }
        static launchGame() {
            ConfigManager.init();
            SceneManager.init();
            PoolManager.init();
        }
    }
    ResManager.preloadResList = [];
    ResManager.progress = 0;

    class BaseSdk {
        showAd(type, callback) {
            return null;
        }
        hideAd(type) { }
    }

    class VivoSdk extends BaseSdk {
        constructor(config) {
            super();
            this.config = null;
            this.banner = null;
            this.interstitial = null;
            this.video = null;
            this.adStatus = new Map();
            this.adCallBack = null;
            this.config = config;
            this.initAd();
        }
        initAd() {
            this.adStatus.set(AdType.Video, AdStatus.Loading);
            this.video = qg.createRewardedVideoAd({
                posId: this.config.videoId
            });
            this.video.onError((err) => {
                console.log('激励视频广告加载失败');
            });
            this.video.onLoad((res) => {
                this.adStatus.set(AdType.Video, AdStatus.Loaded);
                console.log('激励视频广告加载完成-onload触发', JSON.stringify(res));
            });
            this.video['onClose']((res) => {
                console.log('视频广告关闭回调');
                if (res && res.isEnded) {
                    console.log('正常播放结束，可以下发游戏奖励');
                    this.adCallBack && this.adCallBack(true);
                }
                else {
                    this.adCallBack && this.adCallBack(false, '必须完整观看视频才能获取奖励');
                    console.log('播放中途退出，不下发游戏奖励');
                }
                this.adStatus.set(AdType.Video, AdStatus.Loading);
                this.video.load();
            });
        }
        showAd(type, callBack) {
            let systemInfo = qg.getSystemInfoSync();
            if (systemInfo.SDKVersion < 1031) {
                callBack && callBack(false, Language.getValue("NoSupportAds"));
            }
            else {
                this.adCallBack = callBack;
                switch (type) {
                    case AdType.Banner:
                        if (this.banner == null) {
                            this.banner = qg.createBannerAd({
                                posId: this.config.bannerId,
                                style: {}
                            });
                            this.banner.onError((err) => {
                                console.log('banner 广告加载失败:', err);
                                this.banner = null;
                            });
                            this.banner['onClose'](() => {
                                this.banner = null;
                            });
                        }
                        this.banner.show();
                        break;
                    case AdType.Interstitial:
                        break;
                    case AdType.Video:
                        if (this.adStatus.get(AdType.Video) != AdStatus.Loaded) {
                            callBack && callBack(false, '视频每60秒内只能拉去一次哦');
                            if (this.adStatus.get(AdType.Video) != AdStatus.Loading) {
                                this.video.load();
                            }
                        }
                        else {
                            this.adStatus.set(AdType.Video, AdStatus.Showing);
                            this.video.show();
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        hideAd(type) {
            switch (type) {
                case AdType.Banner:
                    this.banner && this.banner.hide();
                    break;
                default:
                    break;
            }
        }
        onAdCallBack() { }
    }

    class HagoAdSdk extends BaseSdk {
        constructor(config) {
            super();
            this.config = null;
            this.adCallBack = null;
            this.config = config;
            this.initAd();
        }
        initAd() {
            this.video = hg['createRewardedVideoAd']({ adUnitId: this.config.videoId });
            this.video.onClose = (res) => {
                if (res && res.isEnded) {
                    this.adCallBack && this.adCallBack(true);
                    this.adCallBack = null;
                }
                else {
                    this.adCallBack && this.adCallBack(false, '####NoSupportAds');
                    this.adCallBack = null;
                }
            };
            this.video.onError = () => {
                this.adCallBack && this.adCallBack(false, '####NoSupportAds');
                this.adCallBack = null;
            };
        }
        showAd(type, callback) {
            switch (type) {
                case AdType.Video:
                    this.adCallBack = callback;
                    if (this.video) {
                        this.video.show();
                    }
                    else {
                        this.adCallBack && this.adCallBack(false, '####NoSupportAds');
                        this.adCallBack = null;
                    }
                    break;
                default:
                    break;
            }
        }
    }

    class BaseReportSdk {
        reportData(obj) { }
    }

    class GoogleReportSdk extends BaseReportSdk {
        constructor(config) {
            super();
            this.config = config;
            console.log('uid:', GameDataManager.Instance.uid);
            ga('create', this.config.reportId, {
                storage: 'none',
                clientId: GameDataManager.Instance.uid
            });
            ga('set', 'transport', 'xhr');
            ga('set', 'appName', config.gameId);
            ga(function (tracker) {
                console.log('tracker:', tracker, tracker.get('clientId'));
            });
            ga('send', 'pageview');
        }
        reportData(obj) {
            let data = { hitType: 'event', eventCategory: obj.eventName };
            if (obj.action) {
                data['eventAction'] = obj.action;
            }
            if (obj.label) {
                data['eventLabel'] = obj.label;
            }
            if (obj.value) {
                data['eventValue'] = obj.value;
            }
            ga('send', data);
        }
    }

    class SDKControl {
        static init() {
            if (Laya.Browser.onVVMiniGame) {
                this.adChannel = new VivoSdk(GlobalConfig.channelConfig.vv);
            }
            else if (Laya.Browser.onMiniGame) {
            }
            else if (Laya.Browser.onHagoMiniGame) {
                this.adChannel = new HagoAdSdk(GlobalConfig.channelConfig.hg);
                this.reportChannel = new GoogleReportSdk({ gameId: GlobalConfig.gameId, reportId: GlobalConfig.reportId });
            }
            else {
            }
        }
        static showAd(type, callback) {
            if (this.adChannel == null) {
                callback && callback(true);
                return;
            }
            if (type == AdType.Video) {
                Laya.SoundManager.setMusicVolume(0);
            }
            this.adChannel.showAd(type, (isSuccess, error) => {
                if (type == AdType.Video) {
                    Laya.SoundManager.setMusicVolume(1);
                }
                callback && callback(isSuccess, error);
            });
        }
        static hideAd(type) {
            if (this.adChannel) {
                this.adChannel.hideAd(type);
            }
        }
        static reportAnalytics(obj) {
            if (this.reportChannel) {
                this.reportChannel.reportData(obj);
            }
            else {
                console.log('该平台暂不支持数据上报');
            }
        }
    }
    SDKControl.adChannel = null;
    SDKControl.reportChannel = null;

    class SDKControlAndroid {
        constructor() {
            this.adCallback = null;
        }
        static Ins() {
            if (SDKControlAndroid.ins == null) {
                SDKControlAndroid.ins = new SDKControlAndroid();
            }
            return SDKControlAndroid.ins;
        }
        static ASCallAndroid1(id, level) {
            if (window.PlatformClass) {
                var bridge = PlatformClass.createClass("org.cloud.sdk.SDKControl");
                bridge.call("TakeIn", level, id);
            }
        }
        static DoStatistics(event, level) {
            if (window.PlatformClass) {
                var bridge = PlatformClass.createClass("org.cloud.sdk.SDKControl");
                bridge.call("doStatistics", event, level);
            }
        }
        ShowAd(type, ac = null) {
            if (window.PlatformClass) {
                if (type == AdType.Video) {
                    Laya.SoundManager.setMusicVolume(0);
                }
                SDKControlAndroid.Ins().adCallback = ac;
                var bridge = PlatformClass.createClass("org.cloud.sdk.SDKControl");
                bridge.call("showAd", type.toString());
            }
        }
        static CallbackAd(str) {
            Laya.SoundManager.setMusicVolume(1);
            if (str == "true") {
                SDKControlAndroid.Ins().adCallback(true);
                SDKControlAndroid.Ins().adCallback = null;
                console.log("广告播放成功");
            }
            else {
                SDKControlAndroid.Ins().adCallback(false, "error");
                SDKControlAndroid.Ins().adCallback = null;
                console.log("广告播放失败");
            }
        }
        static StopMusic(str) {
            console.log("StopMusic", str);
            if (str == "true") {
                Laya.SoundManager.setMusicVolume(0);
            }
            else {
                Laya.SoundManager.setMusicVolume(1);
            }
        }
        static initAndroid() {
            if (Laya.Browser.window) {
                this.os = conchConfig.getOS();
                if (this.os == SDKControlAndroid.conchIOS) {
                    var bridge = PlatformClass.createClass("JSBridge");
                    bridge.call("initGame:");
                }
                else if (this.os == SDKControlAndroid.conchAndroid) {
                    var bridge = PlatformClass.createClass("org.cloud.sdk.SDKControl");
                    bridge.call("initGame");
                }
            }
        }
    }
    SDKControlAndroid.conchIOS = "Conch-ios";
    SDKControlAndroid.conchAndroid = "Conch-android";
    SDKControlAndroid.os = "";
    SDKControlAndroid.ins = null;
    if (Laya.Browser.window) {
        Laya.Browser.window.SDKControlAndroid = SDKControlAndroid;
    }

    class App extends ui.AppUI {
        constructor() {
            super(...arguments);
            this.isVisitable = false;
        }
        onAwake() {
            console.isDebug = true;
            console.log('App.onAwake()');
            this.height = Laya.Browser.height;
            ResManager.preLoadRes();
            EventManager.on(EventType.ResProgress, this, this.updateRes);
            EventManager.on(EventType.LoadingSuccess, this, this.onLoadSuccess);
            EventManager.on(EventType.StartGame, this, this.startGame);
            EventManager.on(EventType.ScreenShot, this, this.screenShot);
            LCHago.gameLoaded();
            LCHago.init(HagoGameType.JO);
            Laya.stage.on(Laya.Event.VISIBILITY_CHANGE, this, this.onVisibilityChange);
            LCHago.updateCloseView({ show: false });
            GameDataManager.Instance.loadData();
            SDKControl.init();
        }
        updateRes(value) {
        }
        onLoadSuccess() {
            return __awaiter(this, void 0, void 0, function* () {
                SDKControlAndroid.ASCallAndroid1("进入游戏", "1");
                console.isDebug = true;
                UIManager.Instance.loadUI();
                yield wait(() => {
                    return GameDataManager.Instance.isLoaded;
                });
                UIManager.Instance.showUI(CUI.HallUI);
                UIManager.Instance.showUI(CUI.TopUI);
                SoundManager.playBGM(SoundId.BGM);
                let newTime = new Date(Date.now()).setHours(0, 0, 0, 0);
                let oldTime = new Date(GameDataManager.Instance.quitTime).setHours(0, 0, 0, 0);
                let day = (newTime - oldTime) / (24 * 3600 * 1000);
                if (day > 1) {
                    GameDataManager.Instance.taskTime = 86400;
                    GameDataManager.Instance.passLv = 0;
                    GameDataManager.Instance.headKillCount = 0;
                    GameDataManager.Instance.completeTasks = [-1, -1, -1];
                }
                else {
                    if ((newTime - oldTime) / 1000 >= GameDataManager.Instance.taskTime) {
                        GameDataManager.Instance.taskTime = 86400;
                        GameDataManager.Instance.passLv = 0;
                        GameDataManager.Instance.headKillCount = 0;
                        GameDataManager.Instance.completeTasks = [-1, -1, -1];
                    }
                    else {
                        GameDataManager.Instance.taskTime -= (newTime - oldTime) / 1000;
                    }
                }
                Laya.timer.loop(1000, this, this.timeBack);
            });
        }
        onNetEnterHall(msgs) {
            console.log('进入大厅:', msgs);
        }
        onNetEnterRoom(msgs) {
            if (msgs.userInfo.uid == LCHago.userData.uid && LCHago.type == HagoGameType.PK) {
            }
        }
        onNetReConnect(msgs) {
            console.log('用户重连上来:', msgs);
        }
        startGame() {
        }
        endGame() {
        }
        screenShot() {
        }
        timeBack() {
            Global.gameAverageTime++;
            GameDataManager.Instance.taskTime--;
            if (GameDataManager.Instance.taskTime <= 0) {
                GameDataManager.Instance.taskTime = 86400;
                GameDataManager.Instance.passLv = 0;
                GameDataManager.Instance.headKillCount = 0;
                GameDataManager.Instance.completeTasks = [-1, -1, -1];
            }
        }
        onVisibilityChange() {
            console.log('onVisibilityChange:', this.isVisitable);
            if (!this.isVisitable) {
                GameDataManager.Instance.quitTime = Date.now();
                GameDataManager.Instance.saveData(true);
                console.log('进入后台保存数据');
            }
            else {
                GameDataManager.Instance.quitTime = Date.now();
                SoundManager.playBGM(SoundId.BGM);
                console.log('进入前台 数据恢复');
            }
            this.isVisitable = !this.isVisitable;
        }
    }

    class CoinUI extends ui.UIs.CoinUI {
        constructor() {
            super(...arguments);
            this.endPos = null;
            this.startPos = null;
            this.ownCoinAniCount = 11;
            this.isPlaying = false;
            this.coin = 0;
            this.isHall = 0;
            this.coinPools = [];
            this.linePools = [];
        }
        onAwake() {
            super.onAwake();
        }
        onShow(params) {
            super.onShow(params);
            this.isHall = 0;
            this.startPos = params[0];
            this.endPos = params[1];
            this.coin = params[2];
            if (params[3]) {
                this.isHall = params[3];
            }
            this.coinFun();
        }
        coinFun() {
            for (let i = 0; i < this.ownCoinAniCount; i++) {
                let coin = this.getCoinPool();
                this.addChild(coin);
                coin.pos(this.startPos.x, this.startPos.y);
                Laya.Tween.to(coin, {
                    x: this.startPos.x + Math.sin(2 * Math.PI / 360 + 36 * i) * 100,
                    y: this.startPos.y + Math.cos(2 * Math.PI / 360 + 36 * i) * 100
                }, 500, Laya.Ease.sineOut, Laya.Handler.create(this, () => {
                    Laya.Tween.to(coin, { x: this.endPos.x, y: this.endPos.y }, 500, undefined, Laya.Handler.create(this, () => {
                        if (!this.isPlaying) {
                            this.isPlaying = true;
                            EventManager.emit(EventType.CoinTurn, [this.coin]);
                            Laya.timer.once(3000, this, () => {
                                this.isPlaying = false;
                            });
                        }
                        coin.removeSelf();
                        this.pushCoinPool(coin);
                        let coinAni = this.getLinePool();
                        this.addChild(coinAni);
                        coinAni.pos(this.endPos.x, this.endPos.y);
                        coinAni.play(0, false);
                        Laya.timer.once(500, this, () => {
                            coinAni.removeSelf();
                            this.pushLinePool(coinAni);
                        });
                    }), i * 100);
                    Laya.Tween.to(coin, { scaleX: 0.5, scaleY: 0.5 }, 500 + i * 100);
                }));
            }
        }
        getCoinPool() {
            if (this.coinPools.length <= 0) {
                let coin = new Laya.Image();
                coin.skin = 'Main/ui_icon_bee_bucks.png';
                return coin;
            }
            else {
                return this.coinPools.pop();
            }
        }
        pushCoinPool(coin) {
            coin.scale(1, 1);
            this.coinPools.push(coin);
        }
        getLinePool() {
            if (this.linePools.length <= 0) {
                let coinAni = this.coinLineAni.clone();
                return coinAni;
            }
            else {
                return this.linePools.pop();
            }
        }
        pushLinePool(coinAni) {
            this.linePools.push(coinAni);
        }
    }

    class DialogUI extends ui.UIs.DialogUI {
        constructor() {
            super(...arguments);
            this.params = null;
        }
        onAwake() {
            super.onAwake();
        }
        onShow(params) {
            super.onShow(params);
            if (this.params && this.params.content) {
                let tmpData = '';
                for (let index = 0; index < this.params.content.length; index++) {
                    tmpData += this.params.content.charAt(index);
                    if (index > 0 && index % 28 == 0) {
                        tmpData += '\n';
                    }
                }
                this.content.text = tmpData;
            }
        }
        onHide(callback) {
            super.onHide(callback);
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            if (ev.target == this.okBtn) {
                this.params.okCallback && this.params.okCallback();
            }
            else {
                this.params.noCallback && this.params.noCallback();
            }
            this.onHide();
        }
    }

    class ExitUI extends ui.UIs.ExitUI {
        constructor() {
            super();
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            Laya.Tween.to(this.centerBox, { scaleX: 1, scaleY: 1 }, 200);
        }
        onHide() {
            super.onHide();
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
            if (ev.target == this.exitBtn) {
                SDKControl.reportAnalytics({ eventName: 'ConfirmQuit', label: '点击确认退出按钮（2级界面退出按钮）' });
                GameDataManager.Instance.quitTime = Date.now();
                GameDataManager.Instance.saveData(true, (err) => {
                    console.log('保存结果：', err);
                    LCHago.exitGame();
                });
            }
            else if (ev.target == this.cancleBtn) {
                Laya.Tween.to(this.centerBox, { scaleX: 0, scaleY: 0 }, 200, undefined, Laya.Handler.create(this, () => {
                    this.onHide();
                }));
            }
        }
    }

    class GameUI extends ui.UIs.GameUI {
        constructor() {
            super(...arguments);
            this.players = [];
            this.point = new Laya.Vector2();
            this.inPos = new Laya.Vector3(0, 0, 0);
            this.outPos = new Laya.Vector3(0, 0, 0);
            this.target = null;
            this.lastPos = new Laya.Vector3(0, 0, 0);
            this.dir = new Laya.Vector3(0, 0, 0);
            this.startPosX = 0;
            this.startPosY = 0;
        }
        onAwake() {
            super.onAwake();
            this.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
            this.on(Laya.Event.MOUSE_OUT, this, this.onMouseOut);
        }
        onShow() {
            super.onShow();
            this.reStart();
            LCHago.on(HagoEvent.GameResult, this.onOverGame, this);
            LCHago.on(HagoEvent.StartGame, this.onStartGame, this);
            EventManager.on(EventType.EndGame, this, this.endGame);
            Laya.timer.frameLoop(1, this, this.updateAim);
            this.aim.visible = false;
            this.startPosX = this.mouseX;
            this.startPosY = this.mouseY;
        }
        onHide(callback) {
            super.onHide(callback);
            LCHago.off(HagoEvent.GameResult, this.onOverGame, this);
            LCHago.off(HagoEvent.StartGame, this.onStartGame, this);
        }
        updateAim() {
            if (Global.isOver) {
                return;
            }
            if (SceneManager.vec3() != null) {
                if (Global.aims.length > 0) {
                    let pos4 = new Laya.Vector4(0, 0, 0, 0);
                    Global.camera.viewport.project(SceneManager.vec3(), Global.camera.projectionViewMatrix, pos4);
                    if (!this.aim.visible) {
                        this.aim.visible = true;
                    }
                    this.aim.pos(pos4.x, pos4.y);
                    if (this.aim.x > Laya.stage.width - 60) {
                        this.aim.x = Laya.stage.width - 60;
                    }
                    if (this.aim.x < 60) {
                        this.aim.x = 60;
                    }
                    if (this.aim.y > Laya.stage.height - 60) {
                        this.aim.y = Laya.stage.height - 60;
                    }
                    if (this.aim.y < 60) {
                        this.aim.y = 60;
                    }
                    this.aim.rotation += Laya.timer.delta * 0.15;
                    Global.scaleAim = CMath.clamp(Global.scaleAim, 1, 100);
                    this.aim.scale(0.01 * Global.scaleAim, 0.01 * Global.scaleAim);
                    if (pos4.z >= 1) {
                        let vec3 = SceneManager.vec3();
                        if (vec3.y - Global.beeCtrl.transform.localPositionY < 1 &&
                            vec3.y - Global.beeCtrl.transform.localPositionY >= 0) {
                            this.aim.y = Laya.stage.height / 2;
                        }
                        else if (vec3.y - Global.beeCtrl.transform.localPositionY < 5 &&
                            vec3.y - Global.beeCtrl.transform.localPositionY >= 1) {
                            this.aim.y = Laya.stage.height / 4;
                        }
                        else if (vec3.y - Global.beeCtrl.transform.localPositionY > 10) {
                            this.aim.y = 60;
                        }
                        if (vec3.y - Global.beeCtrl.transform.localPositionY > -1 &&
                            vec3.y - Global.beeCtrl.transform.localPositionY <= 0) {
                            this.aim.y = Laya.stage.height / 2;
                        }
                        else if (vec3.y - Global.beeCtrl.transform.localPositionY > -5 &&
                            vec3.y - Global.beeCtrl.transform.localPositionY < -1) {
                            this.aim.y = Laya.stage.height - Laya.stage.height / 4;
                        }
                        else if (vec3.y - Global.beeCtrl.transform.localPositionY < -10) {
                            this.aim.y = Laya.stage.height - 60;
                        }
                        if (this.aim.x >= 375) {
                            this.aim.x = Laya.stage.width - 60;
                        }
                        else {
                            this.aim.x = 60;
                        }
                    }
                }
            }
            else {
                this.aim.visible = false;
            }
        }
        endGame() {
            this.onHide();
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
            if (ev.target == this.setBtn) {
                console.log('setBtn');
            }
            else if (ev.target == this.replayBtn) {
                if (Global.isGetKey) {
                    GameDataManager.Instance.keyCount--;
                    EventManager.emit(EventType.KeyCount);
                }
                console.log('replayBtn');
                this.onHide();
                SceneManager.resetGame();
                SceneManager.initGame();
                UIManager.Instance.showUI(CUI.HallUI);
                SoundManager.stopSound(SoundId.BeeWings);
                SDKControl.reportAnalytics({
                    eventName: 'AverageTime',
                    label: Global.gameAverageTime.toString()
                });
                Global.gameAverageTime = 0;
            }
        }
        onMouseDown() {
            this.startPosX = this.mouseX;
            this.startPosY = this.mouseY;
            this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        }
        onMouseMove() {
            let offsetX = this.mouseX - this.startPosX;
            let offsetY = this.mouseY - this.startPosY;
            Global.beeCtrl.transform.rotationEuler = new Laya.Vector3(CMath.clamp(Global.beeCtrl.transform.rotationEuler.x + offsetY * 0.2, -30, 30), Global.beeCtrl.transform.rotationEuler.y - offsetX * 0.2, 0);
            this.startPosX = this.mouseX;
            this.startPosY = this.mouseY;
        }
        onMouseOut() {
            this.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        }
        onOverGame(msgs) {
            if (msgs.isOver) {
                UIManager.Instance.showUI(CUI.ResultUI, msgs.resultInfos);
            }
        }
        onStartGame(msgs) {
            this.reStart();
        }
        reset() {
            this.players.forEach((tmpPlayer) => {
                tmpPlayer.destroy();
            });
            this.players = [];
        }
        reStart() {
            this.reset();
        }
    }

    class GetBeeUI extends ui.UIs.GetBeeUI {
        constructor() {
            super();
        }
        onAwake() {
            super.onAwake();
        }
        onShow(params) {
            super.onShow();
            if (params == 0) {
                this.tipText.text = Language.getValue('Hive unlocked');
                this.getText.text = Global.hiveTips[GameDataManager.Instance.hiveSkin] + Language.getValue('Reward');
                this.hive.skin = `Main/fengchao${GameDataManager.Instance.hiveSkin + 1}.png`;
            }
            else {
                this.tipText.text = Language.getValue('Skin unlocked');
                this.getText.text = Global.beeTips[GameDataManager.Instance.beeSkin] + Language.getValue('Speed');
                this.hive.skin = `Main/mifeng${GameDataManager.Instance.beeSkin + 1}.png`;
            }
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
            if (ev.target == this.receiveBtn) {
                this.onHide();
                GameDataManager.Instance.skinDot = true;
                EventManager.emit(EventType.SkinDot);
                SDKControl.reportAnalytics({ eventName: 'Skin', label: '打开皮肤界面次数' });
                SceneManager.resetGame();
                SceneManager.initGame();
                UIManager.Instance.hideUI(CUI.TopUI);
                UIManager.Instance.hideUI(CUI.ResultUI);
                UIManager.Instance.showUI(CUI.HallUI);
                let hallUI = UIManager.Instance.getUI(CUI.HallUI);
                hallUI.setBtn.visible = false;
                hallUI.musicBtn.visible = false;
                UIManager.Instance.showUI(CUI.SkinUI);
                EventManager.emit(EventType.HideKillIcon);
                Global.targetCamera.removeSelf();
                Global.scene.addChild(Global.targetCamera);
            }
        }
    }

    class GiftUI extends ui.UIs.GiftUI {
        constructor() {
            super();
            this.isClick = false;
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            this.isClick = false;
            this.boxAni.play(0, true);
            EventManager.emit(EventType.KeyCount);
            GameDataManager.Instance.saveData();
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
            if (ev.target == this.receiveBtn) {
                if (this.isClick) {
                    return;
                }
                this.isClick = true;
                Laya.timer.once(500, this, () => {
                    this.onHide();
                });
                let startPos = this.boxAni.localToGlobal(new Laya.Point(0, 0));
                let endPos = new Laya.Point(588, 61);
                UIManager.Instance.showUI(CUI.CoinUI, [startPos, endPos, Global.targetCount * 13 * 3, 0], 201);
            }
        }
        onHide() {
            super.onHide();
        }
    }

    class BeeCtrl extends Laya.Script3D {
        constructor() {
            super();
            this.ani = null;
            this.isStop = false;
            this.aniId = 0;
        }
        onAwake() {
            this.rigid = this.owner.getComponent(Laya.Rigidbody3D);
            this.collide = this.owner.getChildByName('collide');
            this.collide.active = false;
            this.flyEffect = this.owner.getChildByName('FlyEffect');
            this.aniId = 0;
            this.initAni();
        }
        onUpdate() {
            if (Global.isOver || this.isStop) {
                return;
            }
            if (GameDataManager.Instance.speedLv > 4) {
                this.owner.transform.translate(new Laya.Vector3(0, 0, CMath.clamp((0.0757 + GameDataManager.Instance.speedLv * 0.0006) *
                    (1 + GameDataManager.Instance.beeSkin * 0.05), 0.0757, 0.08)), true);
            }
            else {
                this.owner.transform.translate(new Laya.Vector3(0, 0, CMath.clamp((0.05 + GameDataManager.Instance.speedLv * 0.006) *
                    (1 + GameDataManager.Instance.beeSkin * 0.05), 0.05, 0.08)), true);
            }
            if (this.owner.transform.localPositionY < 0.35) {
                this.owner.transform.localPositionY = 0.35;
            }
        }
        onCollisionEnter(collision) {
            if (collision.other.owner.name === 'people' && !Global.isOver) {
                let people = collision.other.owner;
                let peopleCtrl = people.getComponent(PeopleCtrl);
                if (peopleCtrl.isDead) {
                    return;
                }
                peopleCtrl.isDead = true;
                if (Laya.Vector3.distance(this.owner.transform.position, peopleCtrl.head.transform.position) < 1.5) {
                    console.log('攻击头部');
                    GameDataManager.Instance.headKillCount++;
                }
                Global.targetCount++;
                setTimeout(() => {
                    if (Global.targetCount == 1) {
                        SoundManager.playSound(SoundId.FirstBlood);
                    }
                    else if (Global.targetCount == 2) {
                        SoundManager.playSound(SoundId.DoubleKill);
                    }
                    else if (Global.targetCount == 3) {
                        SoundManager.playSound(SoundId.TripleKill);
                    }
                    else if (Global.targetCount == 4) {
                        SoundManager.playSound(SoundId.QuadraKill);
                    }
                    else if (Global.targetCount == 5) {
                        SoundManager.playSound(SoundId.PentaKill);
                    }
                    else if (Global.targetCount == 6) {
                        SoundManager.playSound(SoundId.ACE);
                    }
                }, 400);
                if (Global.targetCount >= Global.target && !Global.isOver) {
                    this.isStop = true;
                }
                this.ani.crossFade('Atk', 0.5, 0, 0);
                Laya.timer.once(800, this, () => {
                    this.ani.crossFade('Fly', 0.1, 0, 0);
                });
                Laya.timer.once(400, this, () => {
                    let pos = new Laya.Vector3(0, 0, 0);
                    Laya.Vector3.subtract(people.transform.position, this.owner.transform.position, pos);
                    let peopleRigid = people.getComponent(Laya.Rigidbody3D);
                    peopleRigid.isKinematic = false;
                    peopleRigid.linearVelocity = new Laya.Vector3(pos.x * 10 * Math.pow(1.005, GameDataManager.Instance.launchLv), pos.y * Math.pow(1.005, GameDataManager.Instance.launchLv) * 10, pos.z * 10 * Math.pow(1.005, GameDataManager.Instance.launchLv));
                    EventManager.emit(EventType.FreshWave);
                    this.collidePlay();
                    SoundManager.vibrate();
                    peopleCtrl.playDead(this.aniId);
                    if (Global.aims.length > 0) {
                        for (let i = 0; i < Global.aims.length; i++) {
                            if (Global.aims[i].parent.name == collision.other.owner.parent.name) {
                                Global.aims.splice(i, 1);
                                i--;
                            }
                        }
                    }
                    if (Global.targetCount >= Global.target && !Global.isOver) {
                        Global.isOver = true;
                        EventManager.emit(EventType.EndGame);
                        this.isStop = false;
                        let p = Global.camera.transform.position;
                        Global.camera.removeSelf();
                        Global.scene.addChild(Global.camera);
                        Global.camera.transform.position = p;
                        Global.beeCtrl.getComponent(Laya.Rigidbody3D).linearVelocity = new Laya.Vector3(0, 0, 0);
                        Global.beeCtrl.getComponent(Laya.Rigidbody3D).isKinematic = true;
                        let stopMove = false;
                        Laya.timer.scale = 0.3;
                        Laya.timer.once(1000, this, () => {
                            Laya.timer.scale = 1;
                            stopMove = true;
                            UIManager.Instance.showUI(CUI.ResultUI);
                        });
                        let t = setInterval(() => {
                            let targetPos = people.transform.position;
                            Global.camera.transform.lookAt(targetPos, Laya.Vector3.UP, true);
                            if (Laya.Vector3.distanceSquared(targetPos, Global.camera.transform.position) > 100) {
                                Global.camera.transform.translate(new Laya.Vector3(0, 0, -0.1), true);
                            }
                            if (stopMove) {
                                clearInterval(t);
                            }
                        }, 10);
                    }
                });
            }
            else if (collision.other.owner.name === 'key' && !Global.isOver) {
                collision.other.owner.active = false;
                GameDataManager.Instance.keyCount++;
                Global.isGetKey = true;
                EventManager.emit(EventType.KeyCount);
                SoundManager.playSound(SoundId.EatKey);
                SDKControl.reportAnalytics({ eventName: 'Key', label: GameDataManager.Instance.levelId.toString() });
            }
            else if (collision.other.owner.name === 'beeHive' && !Global.isOver && !this.isStop) {
                this.isStop = true;
                SDKControl.reportAnalytics({ eventName: 'Hive', label: GameDataManager.Instance.levelId.toString() });
                this.ani.crossFade('Atk', 0.5, 0, 0);
                Laya.timer.once(800, this, () => {
                    this.ani.crossFade('Fly', 0.1, 0, 0);
                });
                Laya.timer.once(400, this, () => {
                    SoundManager.vibrate();
                    this.killPlay();
                    let beeHive = collision.other.owner.getComponent(BeeHive);
                    if (beeHive != null) {
                        beeHive.boom(this.aniId);
                    }
                    collision.other.owner.active = false;
                    this.isStop = false;
                });
            }
            else if ((collision.other.owner.name === 'Ground' || collision.other.owner.name === 'part') &&
                !Global.isOver) {
            }
        }
        collidePlay() {
            this.collide.active = true;
            Laya.timer.once(1000, this, () => {
                this.collide.active = false;
            });
        }
        killPlay() {
            this.flyEffect.particleSystem.play();
        }
        initAni() {
            this.isStop = false;
            let aniPoint = this.owner.getChildByName('ani');
            for (let i = 0; i < aniPoint.numChildren; i++) {
                if (GameDataManager.Instance.beeSkin == i) {
                    let aniObj = aniPoint.getChildAt(i);
                    aniObj.active = true;
                    this.ani = aniObj.getComponent(Laya.Animator);
                }
                else {
                    aniPoint.getChildAt(i).active = false;
                }
            }
            this.ani.crossFade('Fly', 0.1, 0, 0);
        }
    }

    class HallUI extends ui.UIs.HallUI {
        constructor() {
            super(...arguments);
            this.tapLine = null;
            this.speedLine = new Laya.TimeLine();
            this.launchLine = new Laya.TimeLine();
        }
        onAwake() {
            super.onAwake();
            this.speedLine
                .addLabel('up', 0)
                .to(this.speedUp, { y: -30 }, 300)
                .addLabel('down', 0)
                .to(this.speedUp, { y: -10 }, 300);
            this.speedLine.play(0, true);
            this.launchLine
                .addLabel('up', 0)
                .to(this.launchUp, { y: -30 }, 300)
                .addLabel('down', 0)
                .to(this.launchUp, { y: -10 }, 300);
            this.launchLine.play(0, true);
            if (Language.lang == 'ar') {
                this.speedText.align = 'right';
                this.speedLevel.align = 'right';
                this.launchText.align = 'right';
                this.launchLevel.align = 'right';
            }
        }
        onShow() {
            super.onShow();
            LCHago.on(HagoEvent.EnterRoom, this.onNetEnterRoom, this);
            this.tapBtn.on(Laya.Event.MOUSE_UP, this, this.mouseDown);
            EventManager.on(EventType.TaskDot, this, this.freshTaskDot);
            EventManager.on(EventType.SkinDot, this, this.freshSkinDot);
            this.freshLaunch();
            this.freshSpeed();
            this.freshSkinDot();
            this.freshTaskDot();
            EventManager.emit(EventType.FreshLevelId);
            EventManager.emit(EventType.FreshCoin);
            this.enterHall();
            if (GameDataManager.Instance.levelId < 12) {
                this.hiveLock.skin = 'Main/Lock.png';
            }
            else {
                this.hiveLock.skin = 'Main/ui_icon_hud_hive.png';
            }
            SDKControl.reportAnalytics({ eventName: 'IntoTheGame', label: '进入游戏主界面的次数' });
        }
        freshTaskDot() {
            this.taskUp.visible = GameDataManager.Instance.taskDot;
        }
        freshSkinDot() {
            this.skinUp.visible = GameDataManager.Instance.skinDot;
        }
        onHide(callback) {
            LCHago.off(HagoEvent.EnterRoom, this.onNetEnterRoom, this);
            this.tapBtn.off(Laya.Event.MOUSE_UP, this, this.mouseDown);
            EventManager.off(EventType.TaskDot, this, this.freshTaskDot);
            EventManager.off(EventType.SkinDot, this, this.freshSkinDot);
            super.onHide(callback);
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            LCHago.userData.lv = GameDataManager.Instance.lv;
            if (ev.target == this.hiveBtn) {
                if (GameDataManager.Instance.levelId < 12) {
                    return;
                }
                this.onHide();
                UIManager.Instance.showUI(CUI.HiveUI);
                Laya.Tween.to(Global.camera, { fieldOfView: 18 }, 300, null, Laya.Handler.create(this, () => {
                    Global.hiveBg.active = false;
                }));
                SDKControl.reportAnalytics({ eventName: 'Hives', label: '打开蜂巢皮肤界面次数' });
            }
            else if (ev.target == this.skinBtn) {
                UIManager.Instance.showUI(CUI.SkinUI);
                UIManager.Instance.hideUI(CUI.TopUI);
                this.setBtn.visible = false;
                this.musicBtn.visible = false;
                SDKControl.reportAnalytics({ eventName: 'Skin', label: '打开皮肤界面次数' });
            }
            else if (ev.target == this.speedBtn) {
                SDKControl.reportAnalytics({ eventName: 'SpeedUp', label: '点击速度升级按钮次数' });
                let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.speedLv);
                if (GameDataManager.Instance.coin >= config.speedCost) {
                    GameDataManager.Instance.coin -= config.speedCost;
                    GameDataManager.Instance.speedLv++;
                    if (GameDataManager.Instance.speedLv > 44) {
                        GameDataManager.Instance.speedLv = 44;
                    }
                    this.freshSpeed();
                    this.freshLaunch();
                    EventManager.emit(EventType.FreshCoin);
                    this.speedBtn.getChildByName('upAni').play(0, false);
                }
                else {
                    UIManager.Instance.showUI(CUI.TipUI);
                }
            }
            else if (ev.target == this.launchBtn) {
                SDKControl.reportAnalytics({ eventName: 'LaunchUp', label: '点击力度升级按钮次数' });
                let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.launchLv);
                if (GameDataManager.Instance.coin >= config.launchCost) {
                    GameDataManager.Instance.coin -= config.launchCost;
                    GameDataManager.Instance.launchLv++;
                    if (GameDataManager.Instance.launchLv > 44) {
                        GameDataManager.Instance.launchLv = 44;
                    }
                    this.freshSpeed();
                    this.freshLaunch();
                    EventManager.emit(EventType.FreshCoin);
                    this.launchBtn.getChildByName('upAni').play(0, false);
                }
                else {
                    UIManager.Instance.showUI(CUI.TipUI);
                }
            }
            else if (ev.target == this.taskBtn) {
                this.onHide();
                UIManager.Instance.showUI(CUI.TaskUI);
                SDKControl.reportAnalytics({ eventName: 'Missions', label: '任务界面点击次数' });
            }
            else if (ev.target == this.setBtn) {
                SDKControl.reportAnalytics({ eventName: 'QuitGame', label: '点击退出游戏按钮次数' });
                UIManager.Instance.showUI(CUI.ExitUI);
            }
            else if (ev.target == this.musicBtn) {
                GameDataManager.Instance.isMusic = !GameDataManager.Instance.isMusic;
                this.musicBtn.getChildByName('dot').visible = !GameDataManager.Instance.isMusic;
                if (GameDataManager.Instance.isMusic) {
                    SoundManager.playBGM(SoundId.BGM);
                }
                else {
                    SDKControl.reportAnalytics({ eventName: 'MusicOFF', label: '关闭音乐次数' });
                    Laya.SoundManager.stopAll();
                }
            }
        }
        mouseDown() {
            SDKControlAndroid.DoStatistics("StartGame", GameDataManager.Instance.levelId.toString());
            Global.isOver = false;
            Global.targetCount = 0;
            Global.hive.active = false;
            Global.branch.active = false;
            Global.hiveBg.active = false;
            if (Global.beeCtrl.getComponent(BeeCtrl) == null) {
                Global.beeCtrl.addComponent(BeeCtrl);
            }
            Global.beeCtrl.getChildByName('ani').active = true;
            Global.beeCtrl.getComponent(Laya.Rigidbody3D).isKinematic = false;
            Global.beeCtrl.getComponent(BeeCtrl).initAni();
            EventManager.emit(EventType.StartGame);
            UIManager.Instance.showUI(CUI.GameUI);
            UIManager.Instance.hideUI(CUI.HallUI);
            Global.smoke.active = true;
            Laya.timer.once(2000, this, () => {
                Global.smoke.active = false;
            });
            EventManager.emit(EventType.ShowKillIcon);
            SoundManager.playSound(SoundId.BeeWings, 0);
            Global.gameAverageTime = 0;
            SDKControl.reportAnalytics({ eventName: 'levelStart', label: GameDataManager.Instance.levelId.toString() });
        }
        freshSpeed() {
            let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.speedLv);
            this.speedLevel.text = Language.getValue('LEVEL') + GameDataManager.Instance.speedLv;
            this.speedCost.changeText(`${config.speedCost}`);
            if (GameDataManager.Instance.coin >= config.speedCost) {
                this.speedUp.visible = true;
            }
            else {
                this.speedUp.visible = false;
            }
        }
        freshLaunch() {
            let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.launchLv);
            this.launchLevel.text = Language.getValue('LEVEL') + GameDataManager.Instance.launchLv;
            this.launchCost.changeText(`${config.launchCost}`);
            if (GameDataManager.Instance.coin >= config.launchCost) {
                this.launchUp.visible = true;
            }
            else {
                this.launchUp.visible = false;
            }
        }
        enterHall() {
            Global.isOver = true;
            Global.hive.active = true;
            Global.branch.active = true;
            Global.hiveBg.active = true;
            Global.beeCtrl.getChildByName('ani').active = false;
            Global.beeCtrl.getComponent(Laya.Rigidbody3D).linearVelocity = new Laya.Vector3(0, 0, 0);
            Global.beeCtrl.getComponent(Laya.Rigidbody3D).isKinematic = true;
            Global.beeCtrl.transform.localPosition = new Laya.Vector3(0, 5, 0);
            Global.beeCtrl.transform.localRotationEuler = Laya.Vector3.ZERO;
            if (this.tapLine == null) {
                this.tapLine = new Laya.TimeLine();
                this.tapLine
                    .addLabel('max', 0)
                    .to(this.tapImg, { scaleX: 1.2, scaleY: 1.2 }, 300)
                    .addLabel('min', 0)
                    .to(this.tapImg, { scaleX: 1, scaleY: 1 }, 300);
                this.tapLine.play(0, true);
            }
            for (let i = 0; i < Global.hivePoint.numChildren; i++) {
                if (GameDataManager.Instance.hiveSkin == i) {
                    Global.hivePoint.getChildAt(i).active = true;
                    Global.hiveBg.getChildAt(i).active = true;
                }
                else {
                    Global.hivePoint.getChildAt(i).active = false;
                    Global.hiveBg.getChildAt(i).active = false;
                }
            }
            for (let i = 0; i < Global.beePoint.numChildren; i++) {
                if (GameDataManager.Instance.beeSkin == i) {
                    Global.beePoint.getChildAt(i).active = true;
                    Global.beeCtrl.getChildByName('ani').getChildAt(i).active = true;
                }
                else {
                    Global.beePoint.getChildAt(i).active = false;
                    Global.beeCtrl.getChildByName('ani').getChildAt(i).active = false;
                }
            }
        }
        onNetEnterRoom(msgs) {
            if (msgs.error) {
                console.error(msgs.error);
                return;
            }
            if (msgs.userInfo.uid == LCHago.userData.uid) {
                UIManager.Instance.hideUI(CUI.HallUI);
                UIManager.Instance.showUI(CUI.GameUI);
            }
        }
    }

    class HiveUI extends ui.UIs.HiveUI {
        constructor() {
            super();
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            if (GameDataManager.Instance.hiveLv > 6) {
                this.launchBtn.visible = false;
            }
            this.freshHive();
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            if (ev.target == this.backBtn) {
                this.onHide();
                UIManager.Instance.showUI(CUI.HallUI);
                Laya.Tween.to(Global.camera, { fieldOfView: 60 }, 100, null, Laya.Handler.create(this, () => {
                    Global.hiveBg.active = true;
                }));
            }
            else if (ev.target == this.launchBtn) {
                let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.hiveLv);
                if (GameDataManager.Instance.coin > config.hiveCost) {
                    GameDataManager.Instance.coin -= config.hiveCost;
                    GameDataManager.Instance.hiveLv++;
                    if (GameDataManager.Instance.hiveLv > 6) {
                        this.launchBtn.visible = false;
                    }
                    this.freshHive();
                }
            }
        }
        freshHive() {
            let config = ConfigManager.getConfig(CJson.BeeConfig, GameDataManager.Instance.hiveLv);
            this.launchLevel.text = Language.getValue('LEVEL') + GameDataManager.Instance.hiveLv;
            this.launchCost.changeText(`${config.hiveCost}`);
            for (let i = 0; i < GameDataManager.Instance.hiveLv; i++) {
                Global.hive.getChildAt(i).active = true;
            }
        }
    }

    class MatchUI extends ui.UIs.MatchUI {
        onShow() {
            super.onShow();
            LCHago.gameUserInfos.forEach((tmpUser) => {
                if (tmpUser && tmpUser.uid == LCHago.userData.uid) {
                    this.selfView.$('Image').skin = tmpUser.avatar;
                    this.selfView.$('Label').text = 'self:' + tmpUser.name;
                }
                else if (tmpUser) {
                    this.otherView.$('Image').skin = tmpUser.avatar;
                    this.otherView.$('Label').text = 'other:' + tmpUser.name;
                }
            });
            LCHago.on(HagoEvent.EnterRoom, this.onNetEnterRoom, this);
            LCHago.on(HagoEvent.StartGame, this.onNetStartGame, this);
            setTimeout(() => {
                LCHago.readyGame();
            }, 3000);
        }
        onHide() {
            super.onHide();
            LCHago.off(HagoEvent.EnterRoom, this.onNetEnterRoom, this);
            LCHago.off(HagoEvent.StartGame, this.onNetStartGame, this);
        }
        onNetStartGame(msgs) {
            console.log('游戏开始');
            UIManager.Instance.showUI(CUI.GameUI);
            UIManager.Instance.hideUI(CUI.MatchUI);
        }
        onNetEnterRoom(msgs) {
            if (msgs.error) {
                console.error(msgs.error);
                return;
            }
            if (msgs.userInfo && msgs.userInfo.uid == LCHago.userData.uid) {
                this.selfView.$('Image').skin = msgs.userInfo.avatar;
                this.selfView.$('Label').text = 'self:' + msgs.userInfo.name;
            }
            else if (msgs.userInfo) {
                this.selfView.$('Image').skin = msgs.userInfo.avatar;
                this.selfView.$('Label').text = 'other:' + msgs.userInfo.name;
            }
        }
    }

    class ResultUI extends ui.UIs.ResultUI {
        constructor() {
            super(...arguments);
            this.isGetNewSkin = false;
        }
        onAwake() {
            super.onAwake();
            this.levelBox.scale(0, 0);
            this.pewardBg.scale(0, 0);
            this.unlockBg.scale(0, 0);
            this.nextBtn.scale(0, 0);
        }
        onShow(params) {
            SDKControlAndroid.DoStatistics("OverGame", GameDataManager.Instance.levelId.toString());
            super.onShow(params);
            LCHago.on(HagoEvent.StartGame, this.onStartGame, this);
            LCHago.on(HagoEvent.ExitRoom, this.onExitRoom, this);
            LCHago.on(HagoEvent.EnterRoom, this.onEnterRoom, this);
            this.isGetNewSkin = false;
            this.levelText.text = Language.getValue('LEVEL') + GameDataManager.Instance.levelId;
            this.coinText.changeText(`+${Math.floor(Global.targetCount * 13 * (1 + GameDataManager.Instance.beeSkin * 0.05))}`);
            GameDataManager.Instance.levelId++;
            GameDataManager.Instance.passLv++;
            GameDataManager.Instance.saveData();
            let taskUI = UIManager.Instance.getUI(CUI.TaskUI);
            taskUI.freshTask();
            Global.isGetKey = false;
            Laya.Tween.to(this.levelBox, { scaleX: 1, scaleY: 1 }, 300);
            Laya.Tween.to(this.pewardBg, { scaleX: 1, scaleY: 1 }, 300, null, Laya.Handler.create(this, () => {
                let startPos = this.coinImg.localToGlobal(new Laya.Point(0, 0));
                let endPos = new Laya.Point(588, 61);
                UIManager.Instance.showUI(CUI.CoinUI, [
                    startPos,
                    endPos,
                    Math.floor(Global.targetCount * 13 * (1 + GameDataManager.Instance.beeSkin * 0.05)),
                    0
                ], 201);
            }), 200);
            if (GameDataManager.Instance.sumSkin >= 7) {
                this.unlockBg.visible = false;
                if (GameDataManager.Instance.keyCount >= 3) {
                    GameDataManager.Instance.keyCount = 0;
                    UIManager.Instance.showUI(CUI.GiftUI);
                }
            }
            else {
                Laya.Tween.to(this.unlockBg, { scaleX: 1, scaleY: 1 }, 300, null, Laya.Handler.create(this, () => {
                    let curAim = 10;
                    if (GameDataManager.Instance.sumSkin < 1) {
                        curAim = 50;
                    }
                    else if (GameDataManager.Instance.sumSkin < 3) {
                        curAim = 20;
                    }
                    else if (GameDataManager.Instance.sumSkin < 5) {
                        curAim = 10;
                    }
                    let temp = 0;
                    let setIn = setInterval(() => {
                        temp++;
                        GameDataManager.Instance.sliderValue++;
                        let value = GameDataManager.Instance.sliderValue / 100 * 390;
                        this.beeText.changeText(`${GameDataManager.Instance.sliderValue}%`);
                        this.sliderValue.width = CMath.clamp(value, 0, 390);
                        if (temp >= curAim) {
                            clearInterval(setIn);
                            Laya.timer.once(1000, this, () => __awaiter(this, void 0, void 0, function* () {
                                if (GameDataManager.Instance.sliderValue >= 100) {
                                    GameDataManager.Instance.sliderValue = 0;
                                    this.isGetNewSkin = true;
                                    let r = Math.random() * 10;
                                    console.log('r', r);
                                    if (r < 5) {
                                        let skins = [];
                                        for (let i = 0; i < GameDataManager.Instance.beeSkins.length; i++) {
                                            if (GameDataManager.Instance.beeSkins[i] == -1) {
                                                skins.push(i);
                                            }
                                        }
                                        if (skins.length > 0) {
                                            GameDataManager.Instance.beeSkins[skins[0]] = skins[0];
                                            GameDataManager.Instance.beeSkin = skins[0];
                                            GameDataManager.Instance.sumSkin++;
                                            GameDataManager.Instance.saveData(true);
                                            console.log('获得新皮肤');
                                            UIManager.Instance.showUI(CUI.GetBeeUI, 1);
                                        }
                                        else {
                                            let skins = [];
                                            for (let i = 0; i < GameDataManager.Instance.hiveSkins.length; i++) {
                                                if (GameDataManager.Instance.hiveSkins[i] == -1) {
                                                    skins.push(i);
                                                }
                                            }
                                            if (skins.length > 0) {
                                                GameDataManager.Instance.hiveSkins[skins[0]] = skins[0];
                                                GameDataManager.Instance.hiveSkin = skins[0];
                                                GameDataManager.Instance.sumSkin++;
                                                GameDataManager.Instance.saveData(true);
                                                console.log('获得新皮肤');
                                                UIManager.Instance.showUI(CUI.GetBeeUI, 0);
                                            }
                                        }
                                    }
                                    else {
                                        let skins = [];
                                        for (let i = 0; i < GameDataManager.Instance.hiveSkins.length; i++) {
                                            if (GameDataManager.Instance.hiveSkins[i] == -1) {
                                                skins.push(i);
                                            }
                                        }
                                        if (skins.length > 0) {
                                            GameDataManager.Instance.hiveSkins[skins[0]] = skins[0];
                                            GameDataManager.Instance.hiveSkin = skins[0];
                                            GameDataManager.Instance.sumSkin++;
                                            GameDataManager.Instance.saveData(true);
                                            console.log('获得新皮肤');
                                            UIManager.Instance.showUI(CUI.GetBeeUI, 0);
                                        }
                                        else {
                                            let skins = [];
                                            for (let i = 0; i < GameDataManager.Instance.beeSkins.length; i++) {
                                                if (GameDataManager.Instance.beeSkins[i] == -1) {
                                                    skins.push(i);
                                                }
                                            }
                                            if (skins.length > 0) {
                                                GameDataManager.Instance.beeSkins[skins[0]] = skins[0];
                                                GameDataManager.Instance.beeSkin = skins[0];
                                                GameDataManager.Instance.sumSkin++;
                                                GameDataManager.Instance.saveData(true);
                                                console.log('获得新皮肤');
                                                UIManager.Instance.showUI(CUI.GetBeeUI, 1);
                                            }
                                        }
                                    }
                                }
                                if (GameDataManager.Instance.keyCount >= 3) {
                                    GameDataManager.Instance.keyCount = 0;
                                    yield wait(() => {
                                        return !UIManager.Instance.isShow(CUI.GetBeeUI);
                                    });
                                    UIManager.Instance.showUI(CUI.GiftUI);
                                }
                            }));
                        }
                    }, 20);
                }), 500);
            }
            Laya.Tween.to(this.nextBtn, { scaleX: 1, scaleY: 1 }, 300, null, null, 4000);
            Laya.timer.frameLoop(1, this, this.lineRotate);
            SoundManager.playSound(SoundId.GameWin);
            SoundManager.stopSound(SoundId.BeeWings);
            SDKControl.reportAnalytics({ eventName: 'levelFinish', label: GameDataManager.Instance.levelId.toString() });
            SDKControl.reportAnalytics({
                eventName: 'AverageTime',
                label: Global.gameAverageTime.toString()
            });
            Global.gameAverageTime = 0;
        }
        onHide(callback) {
            super.onHide(callback);
            LCHago.off(HagoEvent.StartGame, this.onStartGame, this);
            LCHago.off(HagoEvent.ExitRoom, this.onExitRoom, this);
            LCHago.off(HagoEvent.EnterRoom, this.onEnterRoom, this);
            this.levelBox.scale(0, 0);
            this.pewardBg.scale(0, 0);
            this.unlockBg.scale(0, 0);
            this.nextBtn.scale(0, 0);
            Laya.timer.clear(this, this.lineRotate);
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            if (ev.target == this.nextBtn) {
                this.onHide();
                SceneManager.resetGame();
                SceneManager.initGame();
                UIManager.Instance.showUI(CUI.HallUI);
                EventManager.emit(EventType.HideKillIcon);
                Global.targetCamera.removeSelf();
                Global.scene.addChild(Global.targetCamera);
            }
        }
        onStartGame() {
            this.onHide();
        }
        lineRotate() {
            this.line.rotation += 1;
        }
        onExitRoom(msgs) {
            if (msgs.uid == LCHago.userData.uid) {
                this.onHide();
            }
            else {
            }
        }
        onEnterRoom(msgs) {
        }
    }

    var List = Laya.List;
    var Handler = Laya.Handler;
    class SkinUI extends ui.UIs.SkinUI {
        constructor() {
            super();
            this.startX = 0;
            this.endX = 0;
            this.downX = 0;
            this.offsetX = 0;
            this.isBee = true;
            this.list1 = null;
            this.list2 = null;
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            this.setSkin1(this.list1, this.beeList);
            this.setSkin2(this.list2, this.hiveList);
            Global.beePoint.active = true;
            Global.hivePoint.active = false;
            this.beeDot.visible = true;
            this.hiveDot.visible = false;
            Global.skinCamera.active = true;
            this.tipText.text = Language.getValue('Skins');
            this.tipLabel.text = Global.beeTips[GameDataManager.Instance.beeSkin] + Language.getValue('Speed');
            this.isBee = true;
            this.moveCenter.x = 0;
            this.startX = 0;
            this.downX = 0;
            this.endX = 0;
            this.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
            this.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
            this.on(Laya.Event.MOUSE_UP, this, this.mouseOut);
            GameDataManager.Instance.skinDot = false;
            EventManager.emit(EventType.SkinDot);
        }
        setSkin1(list, sp) {
            if (list != null) {
                return;
            }
            list = new List();
            list.itemRender = Item;
            list.repeatX = 3;
            list.repeatY = 3;
            list.spaceX = 30;
            list.spaceY = 30;
            list.x = 0;
            list.y = 0;
            list.vScrollBarSkin = '';
            list.selectEnable = true;
            list.renderHandler = new Handler(this, this.updateItem1);
            sp.addChild(list);
            list.array = Global.beeSkins;
        }
        setSkin2(list, sp) {
            if (list != null) {
                return;
            }
            list = new List();
            list.itemRender = Item;
            list.repeatX = 3;
            list.repeatY = 3;
            list.spaceX = 30;
            list.spaceY = 30;
            list.x = 0;
            list.y = 0;
            list.vScrollBarSkin = '';
            list.selectEnable = true;
            list.renderHandler = new Handler(this, this.updateItem2);
            sp.addChild(list);
            list.array = Global.hiveSkins;
        }
        updateItem1(cell, index) {
            cell.initItem(index, 0);
        }
        updateItem2(cell, index) {
            cell.initItem(index, 1);
        }
        onHide() {
            this.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
            this.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
            this.off(Laya.Event.MOUSE_UP, this, this.mouseOut);
            super.onHide();
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
            if (ev.target == this.hideBtn) {
                this.onHide();
                Global.skinCamera.active = false;
                UIManager.Instance.showUI(CUI.TopUI);
                let hallUI = UIManager.Instance.getUI(CUI.HallUI);
                hallUI.setBtn.visible = true;
                hallUI.musicBtn.visible = true;
            }
        }
        mouseDown() {
            this.startX = Laya.MouseManager.instance.mouseX;
            this.downX = Laya.MouseManager.instance.mouseX;
        }
        mouseMove() {
            this.offsetX = Laya.MouseManager.instance.mouseX - this.startX;
            this.moveCenter.x += this.offsetX;
            this.startX = Laya.MouseManager.instance.mouseX;
        }
        mouseOut() {
            this.endX = Laya.MouseManager.instance.mouseX;
            if (Math.abs(this.endX - this.downX) > 10) {
                if (this.downX > this.endX) {
                    if (this.isBee) {
                        this.isBee = false;
                        Laya.Tween.to(this.moveCenter, { x: -650 }, 200, null, Laya.Handler.create(this, () => {
                            Global.beePoint.active = false;
                            Global.hivePoint.active = true;
                            this.beeDot.visible = false;
                            this.hiveDot.visible = true;
                            this.tipText.text = Language.getValue('Hives');
                            this.tipLabel.text =
                                Global.hiveTips[GameDataManager.Instance.hiveSkin] + Language.getValue('Reward');
                        }));
                    }
                    else {
                        Laya.Tween.to(this.moveCenter, { x: -650 }, 200);
                    }
                }
                else {
                    if (this.isBee) {
                        Laya.Tween.to(this.moveCenter, { x: 0 }, 200);
                    }
                    else {
                        this.isBee = true;
                        Laya.Tween.to(this.moveCenter, { x: 0 }, 200, null, Laya.Handler.create(this, () => {
                            Global.beePoint.active = true;
                            Global.hivePoint.active = false;
                            this.beeDot.visible = true;
                            this.hiveDot.visible = false;
                            this.tipText.text = Language.getValue('Skins');
                            this.tipLabel.text =
                                Global.beeTips[GameDataManager.Instance.beeSkin] + Language.getValue('Speed');
                        }));
                    }
                }
            }
        }
    }
    var Box = Laya.Box;
    class Item extends Box {
        constructor() {
            super();
            this.skinIndex = 0;
            this.size(Item.WID, Item.HEI);
            let p = Laya.loader.getRes(CPrefab.SkinItem);
            this.skinItem = p.create();
            this.addChild(this.skinItem);
        }
        initItem(index, id) {
            let unlock = this.skinItem.getChildByName('unlock');
            unlock.visible = false;
            let select = this.skinItem.getChildByName('select');
            select.visible = false;
            let skin = this.skinItem.getChildByName('skin');
            skin.visible = true;
            skin.offAll();
            if (id == 0) {
                this.skinIndex = GameDataManager.Instance.beeSkins[index];
                if (GameDataManager.Instance.beeSkin == this.skinIndex) {
                    select.visible = true;
                }
            }
            else if (id == 1) {
                this.skinIndex = GameDataManager.Instance.hiveSkins[index];
                if (GameDataManager.Instance.hiveSkin == this.skinIndex) {
                    select.visible = true;
                }
            }
            if (this.skinIndex != -1) {
                if (id == 0) {
                    skin.skin = `Main/mifeng${this.skinIndex + 1}.png`;
                }
                else if (id == 1) {
                    skin.skin = `Main/fengchao${this.skinIndex + 1}.png`;
                }
                skin.on(Laya.Event.MOUSE_DOWN, this, () => {
                    select.visible = true;
                    if (id == 0) {
                        GameDataManager.Instance.beeSkin = this.skinIndex;
                        let skinUI = UIManager.Instance.getUI(CUI.SkinUI);
                        skinUI.tipLabel.text =
                            Global.beeTips[GameDataManager.Instance.beeSkin] + Language.getValue('Speed');
                        for (let i = 0; i < Global.beePoint.numChildren; i++) {
                            if (GameDataManager.Instance.beeSkin == i) {
                                Global.beePoint.getChildAt(i).active = true;
                                Global.beeCtrl.getChildByName('ani').getChildAt(i).active = true;
                            }
                            else {
                                Global.beePoint.getChildAt(i).active = false;
                                Global.beeCtrl.getChildByName('ani').getChildAt(i).active = false;
                            }
                        }
                    }
                    else if (id == 1) {
                        GameDataManager.Instance.hiveSkin = this.skinIndex;
                        let skinUI = UIManager.Instance.getUI(CUI.SkinUI);
                        skinUI.tipLabel.text =
                            Global.hiveTips[GameDataManager.Instance.hiveSkin] + Language.getValue('Reward');
                        for (let i = 0; i < Global.hivePoint.numChildren; i++) {
                            if (GameDataManager.Instance.hiveSkin == i) {
                                Global.hivePoint.getChildAt(i).active = true;
                                Global.hiveBg.getChildAt(i).active = true;
                            }
                            else {
                                Global.hivePoint.getChildAt(i).active = false;
                                Global.hiveBg.getChildAt(i).active = false;
                            }
                        }
                    }
                });
            }
            else {
                skin.visible = false;
                unlock.visible = true;
            }
        }
        updateShop() {
        }
    }
    Item.WID = 130;
    Item.HEI = 130;

    class TaskUI extends ui.UIs.TaskUI {
        constructor() {
            super();
        }
        onShow() {
            super.onShow();
            GameDataManager.Instance.taskDot = false;
            EventManager.emit(EventType.TaskDot);
            this.freshTask();
            this.freshTime();
            Laya.timer.loop(1000, this, this.freshTime);
        }
        onHide() {
            super.onHide();
            Laya.timer.clear(this, this.freshTime);
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            if (ev.target == this.hideBtn) {
                this.onHide();
                UIManager.Instance.showUI(CUI.HallUI);
            }
        }
        freshTask() {
            let config = ConfigManager.getConfigs(CJson.TaskConfig);
            let targets = [];
            targets.push(GameDataManager.Instance.passLv);
            targets.push(GameDataManager.Instance.headKillCount);
            targets.push(GameDataManager.Instance.passLv);
            for (let i = 0; i < 3; i++) {
                if (targets[i] >= config[i].target &&
                    GameDataManager.Instance.completeTasks[i] != GameDataManager.Instance.tasks[i]) {
                    this.centerBox.getChildAt(i).getChildByName('dot').visible = true;
                    this.centerBox.getChildAt(i).getChildByName('taskValue').width = 350;
                    let taskBtn = this.centerBox.getChildAt(i).getChildByName('taskBtn');
                    taskBtn.visible = true;
                    taskBtn.offAll(null);
                    taskBtn.on(Laya.Event.CLICK, taskBtn, () => {
                        if (i == 0) {
                            SDKControl.reportAnalytics({ eventName: 'Missions_1', label: '领取通过5个关卡奖励' });
                        }
                        else if (i == 1) {
                            SDKControl.reportAnalytics({ eventName: 'Missions_2', label: '领取杀了5个目标奖励' });
                        }
                        else if (i == 2) {
                            SDKControl.reportAnalytics({ eventName: 'Missions_3', label: '领取通过10个关卡奖励' });
                        }
                        GameDataManager.Instance.completeTasks[i] = GameDataManager.Instance.tasks[i];
                        this.freshTask();
                        EventManager.emit(EventType.FreshCoin);
                        let coinImg = this.centerBox.getChildAt(i).getChildByName('coinText').getChildByName('coinImg');
                        let startPos = coinImg.localToGlobal(new Laya.Point(0, 0));
                        let endPos = new Laya.Point(588, 61);
                        UIManager.Instance.showUI(CUI.CoinUI, [startPos, endPos, config[i].reward, 0], 201);
                        GameDataManager.Instance.taskDot = false;
                        EventManager.emit(EventType.TaskDot);
                    });
                    this.centerBox.getChildAt(i).getChildByName('coinText').visible = true;
                    this.centerBox.getChildAt(i).getChildByName('coinText').changeText(`${config[i].reward}`);
                    if (Language.lang == 'ar') {
                        this.centerBox.getChildAt(i).getChildByName('tipText').align = 'right';
                    }
                    this.centerBox.getChildAt(i).getChildByName('check').visible = false;
                    GameDataManager.Instance.taskDot = true;
                    EventManager.emit(EventType.TaskDot);
                }
                else if (targets[i] >= config[i].target &&
                    GameDataManager.Instance.completeTasks[i] == GameDataManager.Instance.tasks[i]) {
                    this.centerBox.getChildAt(i).getChildByName('dot').visible = false;
                    this.centerBox.getChildAt(i).getChildByName('taskValue').width = 350;
                    this.centerBox.getChildAt(i).getChildByName('taskBtn').visible = false;
                    this.centerBox.getChildAt(i).getChildByName('coinText').visible = false;
                    this.centerBox.getChildAt(i).getChildByName('check').visible = true;
                    if (Language.lang == 'ar') {
                        this.centerBox.getChildAt(i).getChildByName('tipText').align = 'right';
                    }
                    this.centerBox.getChildAt(i).getChildByName('rate').text = Language.getValue('Completed');
                }
                else {
                    this.centerBox.getChildAt(i).getChildByName('dot').visible = false;
                    this.centerBox.getChildAt(i).getChildByName('taskValue').width =
                        350 * targets[i] / config[i].target;
                    this.centerBox.getChildAt(i).getChildByName('taskBtn').visible = false;
                    this.centerBox.getChildAt(i).getChildByName('coinText').visible = true;
                    this.centerBox.getChildAt(i).getChildByName('coinText').changeText(`${config[i].reward}`);
                    if (Language.lang == 'ar') {
                        this.centerBox.getChildAt(i).getChildByName('tipText').align = 'right';
                    }
                    this.centerBox.getChildAt(i).getChildByName('rate').changeText(`${targets[i]}/${config[i].target}`);
                    this.centerBox.getChildAt(i).getChildByName('check').visible = false;
                }
            }
        }
        freshTime() {
            this.timeText.changeText(`${Math.floor(GameDataManager.Instance.taskTime / 3600)}:${Math.floor((GameDataManager.Instance.taskTime % 3600) / 60)}:${Math.floor((GameDataManager.Instance.taskTime % 3600) % 60)}`);
        }
    }

    class TipUI extends ui.UIs.TipUI {
        constructor() {
            super();
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            setTimeout(() => {
                this.onHide();
            }, 2000);
        }
    }

    class TopUI extends ui.UIs.TopUI {
        constructor() {
            super();
            this.waves = null;
            this.redCount = 0;
            this.showCoin = 0;
        }
        onAwake() {
            super.onAwake();
        }
        onShow() {
            super.onShow();
            EventManager.on(EventType.FreshLevelId, this, this.freshLevelId);
            EventManager.on(EventType.FreshCoin, this, this.freshCoin);
            EventManager.on(EventType.FreshWave, this, this.freshWave);
            EventManager.on(EventType.ShowKillIcon, this, this.showKillIcon);
            EventManager.on(EventType.HideKillIcon, this, this.hideKillIcon);
            EventManager.on(EventType.KeyCount, this, this.freshKey);
            EventManager.on(EventType.CoinTurn, this, this.coinTurn);
            this.level.text = Language.getValue('LEVEL') + GameDataManager.Instance.levelId;
            this.coinText.changeText(GameDataManager.Instance.coin.toUnitize());
            this.initWaves();
            this.freshKey();
            SceneManager.renderToSprite(this.sp);
        }
        onBtnClick(ev) {
            super.onBtnClick(ev);
            ev.stopPropagation();
        }
        onHide() {
            super.onHide();
            EventManager.off(EventType.FreshLevelId, this, this.freshLevelId);
            EventManager.off(EventType.FreshCoin, this, this.freshCoin);
            EventManager.off(EventType.FreshWave, this, this.freshWave);
            EventManager.off(EventType.ShowKillIcon, this, this.showKillIcon);
            EventManager.off(EventType.HideKillIcon, this, this.hideKillIcon);
            EventManager.off(EventType.KeyCount, this, this.freshKey);
            EventManager.off(EventType.CoinTurn, this, this.coinTurn);
        }
        freshLevelId() {
            this.level.text = Language.getValue('LEVEL') + GameDataManager.Instance.levelId;
            this.initWaves();
        }
        freshCoin() {
            this.coinText.changeText(GameDataManager.Instance.coin.toUnitize());
        }
        freshKey() {
            for (let i = 0; i < this.keyBox.numChildren; i++) {
                if (i < GameDataManager.Instance.keyCount) {
                    this.keyBox.getChildAt(i).visible = true;
                }
                else {
                    this.keyBox.getChildAt(i).visible = false;
                }
            }
        }
        coinTurn(prams) {
            this.redCount = 0;
            this.showCoin = GameDataManager.Instance.coin;
            GameDataManager.Instance.coin += prams[0];
            Laya.timer.loop(100, this, this.redCoinFun, [prams[0]]);
        }
        redCoinFun(coin) {
            this.redCount++;
            let tempCoin = coin / 10;
            this.showCoin += tempCoin;
            this.coinText.changeText(`${Math.floor(this.showCoin).toUnitize()}`);
            if (this.redCount >= 10) {
                this.coinText.changeText(`${GameDataManager.Instance.coin.toUnitize()}`);
                Laya.timer.clear(this, this.redCoinFun);
            }
        }
        showKillIcon() {
            this.targetBg.visible = true;
            this.sp.visible = true;
        }
        hideKillIcon() {
            this.targetBg.visible = false;
            this.sp.visible = false;
        }
        initWaves() {
            this.waves = [];
            if (Global.target == 1) {
                this.item1.x = 110;
                this.item1.visible = true;
                this.item2.visible = false;
                this.item3.visible = false;
                this.item4.visible = false;
                this.item5.visible = false;
                this.item6.visible = false;
                this.item1.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
            }
            else if (Global.target == 2) {
                this.item1.x = 93;
                this.item2.x = 128;
                this.item1.visible = true;
                this.item2.visible = true;
                this.item3.visible = false;
                this.item4.visible = false;
                this.item5.visible = false;
                this.item6.visible = false;
                this.item1.getChildByName('full').alpha = 0;
                this.item2.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
                this.waves.push(this.item2);
            }
            else if (Global.target == 3) {
                this.item1.x = 75;
                this.item2.x = 110;
                this.item3.x = 145;
                this.item1.visible = true;
                this.item2.visible = true;
                this.item3.visible = true;
                this.item4.visible = false;
                this.item5.visible = false;
                this.item6.visible = false;
                this.item1.getChildByName('full').alpha = 0;
                this.item2.getChildByName('full').alpha = 0;
                this.item3.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
                this.waves.push(this.item2);
                this.waves.push(this.item3);
            }
            else if (Global.target == 4) {
                this.item1.x = 58;
                this.item2.x = 93;
                this.item3.x = 128;
                this.item4.x = 163;
                this.item1.visible = true;
                this.item2.visible = true;
                this.item3.visible = true;
                this.item4.visible = true;
                this.item5.visible = false;
                this.item6.visible = false;
                this.item1.getChildByName('full').alpha = 0;
                this.item2.getChildByName('full').alpha = 0;
                this.item3.getChildByName('full').alpha = 0;
                this.item4.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
                this.waves.push(this.item2);
                this.waves.push(this.item3);
                this.waves.push(this.item4);
            }
            else if (Global.target == 5) {
                this.item1.x = 40;
                this.item2.x = 75;
                this.item3.x = 110;
                this.item4.x = 145;
                this.item5.x = 180;
                this.item1.visible = true;
                this.item2.visible = true;
                this.item3.visible = true;
                this.item4.visible = true;
                this.item5.visible = true;
                this.item6.visible = false;
                this.item1.getChildByName('full').alpha = 0;
                this.item2.getChildByName('full').alpha = 0;
                this.item3.getChildByName('full').alpha = 0;
                this.item4.getChildByName('full').alpha = 0;
                this.item5.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
                this.waves.push(this.item2);
                this.waves.push(this.item3);
                this.waves.push(this.item4);
                this.waves.push(this.item5);
            }
            else if (Global.target == 6) {
                this.item1.x = 23;
                this.item2.x = 58;
                this.item3.x = 93;
                this.item4.x = 128;
                this.item5.x = 163;
                this.item6.x = 198;
                this.item1.visible = true;
                this.item2.visible = true;
                this.item3.visible = true;
                this.item4.visible = true;
                this.item5.visible = true;
                this.item6.visible = true;
                this.item1.getChildByName('full').alpha = 0;
                this.item2.getChildByName('full').alpha = 0;
                this.item3.getChildByName('full').alpha = 0;
                this.item4.getChildByName('full').alpha = 0;
                this.item5.getChildByName('full').alpha = 0;
                this.item6.getChildByName('full').alpha = 0;
                this.waves.push(this.item1);
                this.waves.push(this.item2);
                this.waves.push(this.item3);
                this.waves.push(this.item4);
                this.waves.push(this.item5);
                this.waves.push(this.item6);
            }
        }
        freshWave() {
            for (let i = 0; i < this.waves.length; i++) {
                if (Global.targetCount - 1 == i) {
                    let full = this.waves[i].getChildByName('full');
                    full.scale(0, 0);
                    Laya.Tween.to(full, { scaleX: 1, scaleY: 1 }, 200);
                    Laya.Tween.to(full, { alpha: 1 }, 200);
                }
            }
            this.killIcon.visible = true;
            Laya.timer.once(1000, this, () => {
                this.killIcon.visible = false;
            });
        }
    }

    class CardInfo extends Laya.Base2DEntity {
        constructor() {
            super(...arguments);
            this.sign = 'CardInfo';
        }
        reUse(params) {
            console.log('params:', params);
        }
        unUse() { }
    }

    class PrefabTest extends Laya.Image {
    }

    class GameConfig {
        constructor() {
        }
        static init() {
            var reg = Laya.ClassUtils.regClass;
            reg("App.ts", App);
            reg("UIs/Coin/CoinUI.ts", CoinUI);
            reg("UIs/Dialogs/DialogUI.ts", DialogUI);
            reg("UIs/Exit/ExitUI.ts", ExitUI);
            reg("UIs/Games/GameUI.ts", GameUI);
            reg("UIs/GetBee/GetBeeUI.ts", GetBeeUI);
            reg("UIs/Gift/GiftUI.ts", GiftUI);
            reg("UIs/Halls/HallUI.ts", HallUI);
            reg("UIs/Hive/HiveUI.ts", HiveUI);
            reg("UIs/Matchs/MatchUI.ts", MatchUI);
            reg("UIs/Results/ResultUI.ts", ResultUI);
            reg("UIs/Skin/SkinUI.ts", SkinUI);
            reg("UIs/Task/TaskUI.ts", TaskUI);
            reg("UIs/Tip/TipUI.ts", TipUI);
            reg("UIs/Top/TopUI.ts", TopUI);
            reg("UIs/Games/BaseCard.ts", CardInfo);
            reg("UIs/Halls/PrefabTest.ts", PrefabTest);
        }
    }
    GameConfig.width = 750;
    GameConfig.height = 1334;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "App.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    GameConfig.init();

    Object.defineProperty(Laya.Vector3, 'ZERO', {
        get: function () {
            return new Laya.Vector3(0, 0, 0);
        }
    });
    Object.defineProperty(Laya.Vector3, 'ONE', {
        get: function () {
            return new Laya.Vector3(1, 1, 1);
        }
    });
    Object.defineProperty(Laya.Vector3, 'UP', {
        get: function () {
            return new Laya.Vector3(0, 1, 0);
        }
    });
    Object.defineProperty(Laya.Vector3, 'RIGHT', {
        get: function () {
            return new Laya.Vector3(-1, 0, 0);
        }
    });
    Object.defineProperty(Laya.Vector3, 'LEFT', {
        get: function () {
            return new Laya.Vector3(1, 0, 0);
        }
    });
    Object.defineProperty(Laya.Vector3, 'BOTTOM', {
        get: function () {
            return new Laya.Vector3(0, -1, 0);
        }
    });
    Object.defineProperty(Laya.Vector3, 'FORWARD', {
        get: function () {
            return new Laya.Vector3(0, 0, 1);
        }
    });
    Laya.Vector3.create = function () {
        return Laya.Pool.getItemByClass('Vector3', Laya.Vector3);
    };
    Laya.Vector3.prototype.recover = function () {
        this.toDefault();
        Laya.Pool.recover('Vector3', this);
    };
    Laya.Vector3.angle = function (from, to) {
        let num = Math.sqrt(Laya.Vector3.scalarLengthSquared(from) * Laya.Vector3.scalarLengthSquared(to));
        let result = 0;
        if (num < Laya.MathUtils3D.zeroTolerance) {
            result = 0;
        }
        else {
            let f = CMath.clamp(Laya.Vector3.dot(from, to) / num, -1, 1);
            result = Math.acos(f) * 57.29578;
        }
        return result;
    };
    Laya.Vector3.prototype.setValue = function (x, y, z) {
        if (y === undefined && x.y !== undefined) {
            y = Number(x.y);
        }
        if (z === undefined && x.z !== undefined) {
            z = Number(x.z);
        }
        if (x.x !== undefined) {
            x = Number(x.x);
        }
        this.x = x;
        this.y = y;
        this.z = z;
    };

    class CMath$1 {
        static deg2Rad(deg) {
            return deg * 0.0174533;
        }
        static rad2Deg(rad) {
            return rad * 57.29578;
        }
        static sin(angle) {
            angle = this.repeat(angle);
            if (this.mathData[angle] === undefined) {
                this.mathData[angle] = {};
            }
            if (this.mathData[angle]['sin'] === undefined) {
                this.mathData[angle]['sin'] = parseFloat(Math.sin(this.deg2Rad(angle)).toFixed(4));
            }
            return this.mathData[angle]['sin'];
        }
        static cos(angle) {
            angle = this.repeat(angle);
            if (this.mathData[angle] === undefined) {
                this.mathData[angle] = {};
            }
            if (this.mathData[angle]['cos'] === undefined) {
                this.mathData[angle]['cos'] = parseFloat(Math.cos(this.deg2Rad(angle)).toFixed(4));
            }
            return this.mathData[angle]['cos'];
        }
        static tan(angle) {
            angle = this.repeat(angle);
            if (this.mathData[angle] === undefined) {
                this.mathData[angle] = {};
            }
            if (this.mathData[angle]['tan'] === undefined) {
                let sin = this.sin(angle);
                let cos = this.cos(angle);
                this.mathData[angle]['tan'] = cos == 0 ? NaN : parseFloat((sin / cos).toFixed(4));
            }
            return this.mathData[angle]['tan'];
        }
        static repeat(value, length = 360) {
            while (value < 0) {
                value += length;
            }
            while (value >= length) {
                value -= length;
            }
            return value;
        }
        static clamp(value, min, max) {
            return value > max ? max : value < min ? min : value;
        }
        static random(min, max) {
            if (max == undefined) {
                max = 1;
            }
            if (min == undefined) {
                min = 0;
            }
            return Math.random() * (max - min) + min;
        }
    }
    CMath$1.mathData = {};
    window['CMath'] = CMath$1;
    EventManager.on(EventType.LoadingSuccess, null, () => {
        let cMathData = Laya.loader.getRes(CBin.CMath);
        if (cMathData) {
            CMath$1.mathData = JSON.parse(pako.ungzip(cMathData, { to: 'string' }));
        }
    });

    Laya.Animation.prototype.clone = function () {
        var anim = new Laya.Animation();
        anim.loadAnimation(this['_url']);
        return anim;
    };
    Object.defineProperty(Laya.AnimatorControllerLayer.prototype, 'states', {
        get: function () {
            return this._states;
        }
    });

    Array.prototype.random = function (isSplice = false) {
        if (this.length <= 0) {
            return null;
        }
        var idx = Math.floor(Math.random() * this.length);
        if (isSplice) {
            return this.splice(idx, 1)[0];
        }
        else {
            return this[idx];
        }
    };
    Array.prototype.contains = function (value) {
        if (typeof value == 'function') {
            return this.find(value) != null;
        }
        else {
            return this.find((item) => item == value) != null;
        }
    };

    String.prototype.replaceAll = function (searchValue, replaceValue) {
        return this.replace(new RegExp(searchValue, 'gm'), replaceValue);
    };
    String.prototype.format = function (args) {
        var result = this;
        if (arguments.length > 0) {
            if (arguments.length == 1 && typeof args == 'object') {
                for (var key in args) {
                    if (args[key] != undefined) {
                        var reg = new RegExp('({' + key + '})', 'g');
                        result = result.replace(reg, args[key]);
                    }
                }
            }
            else {
                for (var i = 0; i < arguments.length; i++) {
                    if (arguments[i] != undefined) {
                        var reg = new RegExp('({)' + i + '(})', 'g');
                        result = result.replace(reg, arguments[i]);
                    }
                }
            }
        }
        return result;
    };
    String.prototype.empty = function () {
        return this.trim() == '';
    };
    String.prototype.bool = function () {
        let value = this.toLowerCase();
        return /^true$/i.test(value);
    };
    String.prototype.number = function () {
        return parseFloat(this.replace(/[^-\d.]/gi, ''));
    };
    Object.defineProperty(String, 'isNullOrEmpty', {
        get: function () {
            return function (value) {
                if (value == null || value.length <= 0) {
                    return true;
                }
                else {
                    return false;
                }
            };
        }
    });
    String.prototype.contains = function (subStr) {
        return this.indexOf(subStr) >= 0;
    };
    String.prototype.trim = function () {
        return this.replace(/(^[\s　]*)|([\s　]*$)/g, '');
    };
    String.prototype.lTrim = function () {
        return this.replace(/(^[\s　]*)/g, '');
    };
    String.prototype.rTrim = function () {
        return this.replace(/([\s　]*$)/g, '');
    };
    String.prototype.byteLength = function () {
        var doubleByteChars = this.match(/[^\x00-\xff]/gi);
        return this.length + (doubleByteChars == null ? 0 : doubleByteChars.length);
    };
    String.prototype.isJson = function () {
        var str = this.replace(/\\./g, '@').replace(/"[^"\\\n\r]*"/g, '');
        return /^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/.test(str);
    };

    Number.prototype.toZeroFill = function (bit) {
        let str = this.toString();
        while (str.length < bit) {
            str = '0' + str;
        }
        return str;
    };
    Number.prototype.toUnitize = function () {
        let baseValue = 1000;
        let unit = ['', '', 'K', 'M', 'G', 'T', 'P', 'E', 'B'];
        for (let index = 1, length = unit.length; index < length; index++) {
            if (this < Math.pow(baseValue, index)) {
                let value = (this > 1 ? this / Math.pow(baseValue, index - 1) : this).toFixed(2).substring(0, 4);
                while (value.endsWith('0')) {
                    value = value.substring(0, value.length - 1);
                }
                if (value.endsWith('.')) {
                    value = value.substring(0, value.length - 1);
                }
                return value + unit[index];
            }
        }
        return this.toString();
    };

    class Charenc {
    }
    Charenc.utf8 = {
        stringToBytes: function (str) {
            return Charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
        },
        bytesToString: function (bytes) {
            return decodeURIComponent(escape(Charenc.bin.bytesToString(bytes)));
        }
    };
    Charenc.bin = {
        stringToBytes: function (str) {
            for (var bytes = [], i = 0; i < str.length; i++) {
                bytes.push(str.charCodeAt(i) & 0xff);
            }
            return bytes;
        },
        bytesToString: function (bytes) {
            for (var str = [], i = 0; i < bytes.length; i++) {
                str.push(String.fromCharCode(bytes[i]));
            }
            return str.join('');
        }
    };
    class Crypt {
    }
    Crypt.base64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    Crypt.rotl = function (n, b) {
        return (n << b) | (n >>> (32 - b));
    };
    Crypt.rotr = function (n, b) {
        return (n << (32 - b)) | (n >>> b);
    };
    Crypt.endian = function (n) {
        if (typeof n == 'number') {
            return (Crypt.rotl(n, 8) & 0x00ff00ff) | (Crypt.rotl(n, 24) & 0xff00ff00);
        }
        else {
            for (var i = 0; i < n.length; i++) {
                n[i] = Crypt.endian(n[i]);
            }
            return n;
        }
    };
    Crypt.randomBytes = function (n) {
        for (var bytes = []; n > 0; n--) {
            bytes.push(Math.floor(Math.random() * 256));
        }
        return bytes;
    };
    Crypt.bytesToWords = function (bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8) {
            words[b >>> 5] |= bytes[i] << (24 - b % 32);
        }
        return words;
    };
    Crypt.wordsToBytes = function (words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8)
            bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xff);
        return bytes;
    };
    Crypt.bytesToHex = function (bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 0xf).toString(16));
        }
        return hex.join('');
    };
    Crypt.hexToBytes = function (hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
    };
    Crypt.bytesToBase64 = function (bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
            var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
            for (var j = 0; j < 4; j++)
                if (i * 8 + j * 6 <= bytes.length * 8)
                    base64.push(Crypt.base64map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                else
                    base64.push('=');
        }
        return base64.join('');
    };
    Crypt.base64ToBytes = function (base64) {
        base64 = base64.replace(/[^A-Z0-9+\/]/gi, '');
        for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
            if (imod4 == 0)
                continue;
            bytes.push(((Crypt.base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |
                (Crypt.base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
        }
        return bytes;
    };
    function isBuffer(obj) {
        return (obj != null &&
            obj.constructor != null &&
            typeof obj.constructor.isBuffer === 'function' &&
            obj.constructor.isBuffer(obj));
    }
    var md5 = function (message, options) {
        let FF = function (a, b, c, d, x, s, t) {
            var n = a + ((b & c) | (~b & d)) + (x >>> 0) + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        };
        let GG = function (a, b, c, d, x, s, t) {
            var n = a + ((b & d) | (c & ~d)) + (x >>> 0) + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        };
        let HH = function (a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + (x >>> 0) + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        };
        let II = function (a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
            return ((n << s) | (n >>> (32 - s))) + b;
        };
        if (typeof message == 'string')
            if (options && options.encoding === 'binary')
                message = Charenc.bin.stringToBytes(message);
            else
                message = Charenc.utf8.stringToBytes(message);
        else if (isBuffer(message))
            message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message) && message.constructor !== Uint8Array)
            message = message.toString();
        var m = Crypt.bytesToWords(message), l = message.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (var i = 0; i < m.length; i++) {
            m[i] = (((m[i] << 8) | (m[i] >>> 24)) & 0x00ff00ff) | (((m[i] << 24) | (m[i] >>> 8)) & 0xff00ff00);
        }
        m[l >>> 5] |= 0x80 << (l % 32);
        m[(((l + 64) >>> 9) << 4) + 14] = l;
        for (var i = 0; i < m.length; i += 16) {
            var aa = a, bb = b, cc = c, dd = d;
            a = FF(a, b, c, d, m[i + 0], 7, -680876936);
            d = FF(d, a, b, c, m[i + 1], 12, -389564586);
            c = FF(c, d, a, b, m[i + 2], 17, 606105819);
            b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
            a = FF(a, b, c, d, m[i + 4], 7, -176418897);
            d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
            c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
            b = FF(b, c, d, a, m[i + 7], 22, -45705983);
            a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
            d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
            c = FF(c, d, a, b, m[i + 10], 17, -42063);
            b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
            a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
            d = FF(d, a, b, c, m[i + 13], 12, -40341101);
            c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
            b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
            a = GG(a, b, c, d, m[i + 1], 5, -165796510);
            d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
            c = GG(c, d, a, b, m[i + 11], 14, 643717713);
            b = GG(b, c, d, a, m[i + 0], 20, -373897302);
            a = GG(a, b, c, d, m[i + 5], 5, -701558691);
            d = GG(d, a, b, c, m[i + 10], 9, 38016083);
            c = GG(c, d, a, b, m[i + 15], 14, -660478335);
            b = GG(b, c, d, a, m[i + 4], 20, -405537848);
            a = GG(a, b, c, d, m[i + 9], 5, 568446438);
            d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
            c = GG(c, d, a, b, m[i + 3], 14, -187363961);
            b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
            a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
            d = GG(d, a, b, c, m[i + 2], 9, -51403784);
            c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
            b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
            a = HH(a, b, c, d, m[i + 5], 4, -378558);
            d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
            c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
            b = HH(b, c, d, a, m[i + 14], 23, -35309556);
            a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
            d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
            c = HH(c, d, a, b, m[i + 7], 16, -155497632);
            b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
            a = HH(a, b, c, d, m[i + 13], 4, 681279174);
            d = HH(d, a, b, c, m[i + 0], 11, -358537222);
            c = HH(c, d, a, b, m[i + 3], 16, -722521979);
            b = HH(b, c, d, a, m[i + 6], 23, 76029189);
            a = HH(a, b, c, d, m[i + 9], 4, -640364487);
            d = HH(d, a, b, c, m[i + 12], 11, -421815835);
            c = HH(c, d, a, b, m[i + 15], 16, 530742520);
            b = HH(b, c, d, a, m[i + 2], 23, -995338651);
            a = II(a, b, c, d, m[i + 0], 6, -198630844);
            d = II(d, a, b, c, m[i + 7], 10, 1126891415);
            c = II(c, d, a, b, m[i + 14], 15, -1416354905);
            b = II(b, c, d, a, m[i + 5], 21, -57434055);
            a = II(a, b, c, d, m[i + 12], 6, 1700485571);
            d = II(d, a, b, c, m[i + 3], 10, -1894986606);
            c = II(c, d, a, b, m[i + 10], 15, -1051523);
            b = II(b, c, d, a, m[i + 1], 21, -2054922799);
            a = II(a, b, c, d, m[i + 8], 6, 1873313359);
            d = II(d, a, b, c, m[i + 15], 10, -30611744);
            c = II(c, d, a, b, m[i + 6], 15, -1560198380);
            b = II(b, c, d, a, m[i + 13], 21, 1309151649);
            a = II(a, b, c, d, m[i + 4], 6, -145523070);
            d = II(d, a, b, c, m[i + 11], 10, -1120210379);
            c = II(c, d, a, b, m[i + 2], 15, 718787259);
            b = II(b, c, d, a, m[i + 9], 21, -343485551);
            a = (a + aa) >>> 0;
            b = (b + bb) >>> 0;
            c = (c + cc) >>> 0;
            d = (d + dd) >>> 0;
        }
        return Crypt.endian([a, b, c, d]);
    };
    function MD5$1(message) {
        if (message === undefined || message === null)
            throw new Error('Illegal argument ' + message);
        var digestbytes = Crypt.wordsToBytes(md5(message));
        return Crypt.bytesToHex(digestbytes);
    }
    window['MD5'] = MD5$1;
    function sha1$1(message) {
        if (typeof message == 'string')
            message = Charenc.utf8.stringToBytes(message);
        else if (isBuffer(message))
            message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message))
            message = message.toString();
        var m = Crypt.bytesToWords(message), l = message.length * 8, w = [], H0 = 1732584193, H1 = -271733879, H2 = -1732584194, H3 = 271733878, H4 = -1009589776;
        m[l >> 5] |= 0x80 << (24 - l % 32);
        m[(((l + 64) >>> 9) << 4) + 15] = l;
        for (var i = 0; i < m.length; i += 16) {
            var a = H0, b = H1, c = H2, d = H3, e = H4;
            for (var j = 0; j < 80; j++) {
                if (j < 16)
                    w[j] = m[i + j];
                else {
                    var n = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
                    w[j] = (n << 1) | (n >>> 31);
                }
                var t = ((H0 << 5) | (H0 >>> 27)) +
                    H4 +
                    (w[j] >>> 0) +
                    (j < 20
                        ? ((H1 & H2) | (~H1 & H3)) + 1518500249
                        : j < 40
                            ? (H1 ^ H2 ^ H3) + 1859775393
                            : j < 60 ? ((H1 & H2) | (H1 & H3) | (H2 & H3)) - 1894007588 : (H1 ^ H2 ^ H3) - 899497514);
                H4 = H3;
                H3 = H2;
                H2 = (H1 << 30) | (H1 >>> 2);
                H1 = H0;
                H0 = t;
            }
            H0 += a;
            H1 += b;
            H2 += c;
            H3 += d;
            H4 += e;
        }
        message = [H0, H1, H2, H3, H4];
        return Crypt.bytesToHex(Crypt.wordsToBytes(message));
    }
    window['sha1'] = sha1$1;

    Object.defineProperty(Laya.ShurikenParticleSystem.prototype, 'gravity', {
        get: function () {
            if (this._gravity == null) {
                this._gravity = new Laya.Vector3(0, 0, 0);
            }
            return this._gravity;
        },
        set: function (value) {
            this._gravity = value;
        }
    });
    if (Laya.Sprite3D) {
        Laya.Sprite3D.prototype.changeLayer = function (layer) {
            let self = this;
            self.layer = layer;
            if (self.numChildren > 0) {
                for (let index = 0; index < self.numChildren; index++) {
                    let child = self.getChildAt(index);
                    child.changeLayer && child.changeLayer(layer);
                }
            }
        };
    }
    Laya.ClassUtils.regClass('Laya.ShurikenParticle', Laya.ShurikenParticleMaterial);

    Laya.SubShader.prototype.delPassAtIndex = function (index) {
        this._passes.splice(index, 1);
    };

    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function wait$1(predicate) {
        return new Promise((resolve, reject) => {
            let interval = setInterval(() => {
                if (predicate()) {
                    resolve();
                    clearInterval(interval);
                }
            }, 50);
        });
    }
    function waitSecond(time) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve();
                }, time);
            });
        });
    }
    function waitFrame(frame = 1) {
        return __awaiter$1(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                Laya.timer.frameOnce(frame, null, () => {
                    resolve();
                });
            });
        });
    }
    window['wait'] = wait$1;
    window['waitSecond'] = waitSecond;
    window['waitFrame'] = waitFrame;

    Laya.Loader.prototype['onLoaded'] = function (data = null) {
        var type = this._type;
        if (type == Laya.Loader.PLFB) {
            this.parsePLFBData(data);
            this.complete(data);
        }
        else if (type == Laya.Loader.PLF) {
            this.parsePLFData(data);
            this.complete(data);
        }
        else if (type === Laya.Loader.IMAGE) {
            if (data instanceof ArrayBuffer) {
                var ext = Laya.Utils.getFileExtension(this._url);
                let format;
                switch (ext) {
                    case 'ktx':
                        format = Laya.TextureFormat.ETC1RGB;
                        break;
                    case 'pvr':
                        format = Laya.TextureFormat.PVRTCRGBA_4BPPV;
                        break;
                    default: {
                        console.error('unknown format', ext);
                        return;
                    }
                }
                var tex = new Laya.Texture2D(0, 0, format, false, false);
                tex.wrapModeU = Laya.WarpMode.Clamp;
                tex.wrapModeV = Laya.WarpMode.Clamp;
                tex.setCompressData(data);
                tex._setCreateURL(this.url);
            }
            else if (!(data instanceof Laya.Texture2D)) {
                var tex = new Laya.Texture2D(data.width, data.height, 1, false, false);
                tex.wrapModeU = Laya.WarpMode.Clamp;
                tex.wrapModeV = Laya.WarpMode.Clamp;
                tex.loadImageSource(data, true);
                tex._setCreateURL(data.src);
            }
            else {
                var tex = data;
            }
            var texture = new Laya.Texture(tex);
            texture.url = this._url;
            this.complete(texture);
        }
        else if (type === Laya.Loader.SOUND || type === 'nativeimage') {
            this.complete(data);
        }
        else if (type === 'htmlimage') {
            var tex = new Laya.Texture2D(data.width, data.height, 1, false, false);
            tex.wrapModeU = Laya.WarpMode.Clamp;
            tex.wrapModeV = Laya.WarpMode.Clamp;
            tex.loadImageSource(data, true);
            tex._setCreateURL(data.src);
            this.complete(tex);
        }
        else if (type === Laya.Loader.ATLAS) {
            if (data.frames) {
                var toloadPics = [];
                if (!this._data) {
                    this._data = data;
                    if (data.meta && data.meta.image) {
                        toloadPics = data.meta.image.split(',');
                        var split = this._url.indexOf('/') >= 0 ? '/' : '\\';
                        var idx = this._url.lastIndexOf(split);
                        var folderPath = idx >= 0 ? this._url.substr(0, idx + 1) : '';
                        var changeType = null;
                        if (Laya.Browser.onAndroid && data.meta.compressTextureAndroid) {
                            changeType = '.ktx';
                        }
                        if (Laya.Browser.onIOS && data.meta.compressTextureIOS) {
                            changeType = '.pvr';
                        }
                        for (var i = 0, len = toloadPics.length; i < len; i++) {
                            if (changeType) {
                                toloadPics[i] = folderPath + toloadPics[i].replace('.png', changeType);
                            }
                            else {
                                toloadPics[i] = folderPath + toloadPics[i];
                            }
                        }
                    }
                    else {
                        toloadPics = [this._url.replace('.json', '.png')];
                    }
                    toloadPics.reverse();
                    data.toLoads = toloadPics;
                    data.pics = [];
                }
                this.event(Laya.Event.PROGRESS, 0.3 + 1 / toloadPics.length * 0.6);
                return this._loadResourceFilter(Laya.Loader.IMAGE, toloadPics.pop());
            }
            else {
                if (!(data instanceof Laya.Texture2D)) {
                    var tex = new Laya.Texture2D(data.width, data.height, 1, false, false);
                    tex.wrapModeU = Laya.BaseTexture.WARPMODE_CLAMP;
                    tex.wrapModeV = Laya.BaseTexture.WARPMODE_CLAMP;
                    tex.loadImageSource(data, true);
                    tex._setCreateURL(data.src);
                    data = tex;
                }
                this._data.pics.push(data);
                if (this._data.toLoads.length > 0) {
                    this.event(Laya.Event.PROGRESS, 0.3 + 1 / this._data.toLoads.length * 0.6);
                    return this._loadResourceFilter(Laya.Loader.IMAGE, this._data.toLoads.pop());
                }
                var frames = this._data.frames;
                var cleanUrl = this._url.split('?')[0];
                var directory = this._data.meta && this._data.meta.prefix
                    ? this._data.meta.prefix
                    : cleanUrl.substring(0, cleanUrl.lastIndexOf('.')) + '/';
                var pics = this._data.pics;
                var atlasURL = Laya.URL.formatURL(this._url);
                var map = Laya.Loader.atlasMap[atlasURL] || (Laya.Loader.atlasMap[atlasURL] = []);
                map['dir'] = directory;
                var scaleRate = 1;
                if (this._data.meta && this._data.meta.scale && this._data.meta.scale != 1) {
                    scaleRate = parseFloat(this._data.meta.scale);
                    for (var name in frames) {
                        var obj = frames[name];
                        var tPic = pics[obj.frame.idx ? obj.frame.idx : 0];
                        var url = Laya.URL.formatURL(directory + name);
                        tPic.scaleRate = scaleRate;
                        var tTexture;
                        tTexture = Laya.Texture['_create'](tPic, obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h, obj.spriteSourceSize.x, obj.spriteSourceSize.y, obj.sourceSize.w, obj.sourceSize.h, Laya.Loader.getRes(url));
                        Laya.Loader.cacheTexture(url, tTexture);
                        tTexture.url = url;
                        map.push(url);
                    }
                }
                else {
                    for (name in frames) {
                        obj = frames[name];
                        tPic = pics[obj.frame.idx ? obj.frame.idx : 0];
                        url = Laya.URL.formatURL(directory + name);
                        tTexture = Laya.Texture['_create'](tPic, obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h, obj.spriteSourceSize.x, obj.spriteSourceSize.y, obj.sourceSize.w, obj.sourceSize.h, Laya.Loader.getRes(url));
                        Laya.Loader.cacheTexture(url, tTexture);
                        tTexture.url = url;
                        map.push(url);
                    }
                }
                delete this._data.pics;
                this.complete(this._data);
            }
        }
        else if (type === Laya.Loader.FONT) {
            if (!this._data) {
                this._data = data;
                this.event(Laya.Event.PROGRESS, 0.5);
                return this._loadResourceFilter(Laya.Loader.IMAGE, this._url.replace('.fnt', '.png'));
            }
            else {
                var bFont = new Laya.BitmapFont();
                if (data instanceof ArrayBuffer) {
                    var ext = Laya.Utils.getFileExtension(this._url);
                    let format;
                    switch (ext) {
                        case 'ktx':
                            format = Laya.TextureFormat.ETC1RGB;
                            break;
                        case 'pvr':
                            format = Laya.TextureFormat.PVRTCRGBA_4BPPV;
                            break;
                        default: {
                            console.error('unknown format', ext);
                            return;
                        }
                    }
                    var tex = new Laya.Texture2D(0, 0, format, false, false);
                    tex.wrapModeU = Laya.WarpMode.Clamp;
                    tex.wrapModeV = Laya.WarpMode.Clamp;
                    tex.setCompressData(data);
                    tex._setCreateURL(this.url);
                }
                else if (!(data instanceof Laya.Texture2D)) {
                    var tex = new Laya.Texture2D(data.width, data.height, 1, false, false);
                    tex.wrapModeU = Laya.WarpMode.Clamp;
                    tex.wrapModeV = Laya.WarpMode.Clamp;
                    tex.loadImageSource(data, true);
                    tex._setCreateURL(data.src);
                }
                else {
                    var tex = data;
                }
                bFont.parseFont(this._data, new Laya.Texture(tex));
                var tArr = this._url.split('.fnt')[0].split('/');
                var fontName = tArr[tArr.length - 1];
                Laya.Text.registerBitmapFont(fontName, bFont);
                this._data = bFont;
                this.complete(this._data);
            }
        }
        else if (type === Laya.Loader.PREFAB) {
            var prefab = new Laya.Prefab();
            prefab.json = data;
            this.complete(prefab);
        }
        else {
            this.complete(data);
        }
    };
    Laya.Loader.prototype['parsePLFBData'] = function (plfData) {
        var byte = new Laya.Byte(plfData);
        let isZip = byte.readUTFString();
        if (isZip == 'isZip') {
            console.log('isZip:', this['_url']);
            let zipBytes = byte.readArrayBuffer(byte.length - byte.pos);
            byte = new Laya.Byte(pako.ungzip(zipBytes));
        }
        else {
            byte.pos = 0;
        }
        var i, len;
        len = byte.getInt32();
        for (i = 0; i < len; i++) {
            this.parseOnePLFBFile(byte);
        }
    };

    Object.defineProperty(JSON, 'parseRecursion', {
        get: function () {
            return function (jsonData) {
                if (typeof jsonData == 'string') {
                    if (String.isNullOrEmpty(jsonData)) {
                        jsonData = null;
                    }
                    else {
                        try {
                            jsonData = JSON.parse(jsonData.replaceAll("'", '"'));
                        }
                        catch (error) { }
                    }
                }
                if (typeof jsonData == 'object') {
                    for (const key in jsonData) {
                        if (typeof jsonData[key] == 'string' || typeof jsonData[key] == 'object') {
                            jsonData[key] = JSON.parseRecursion(jsonData[key]);
                        }
                    }
                }
                return jsonData;
            };
        }
    });

    Laya.TextRender.prototype['_drawResortedWords'] = function (ctx, startx, starty, samePagesData) {
        var isLastRender = ctx._charSubmitCache ? ctx._charSubmitCache._enable : false;
        var mat = ctx._curMat;
        var slen = samePagesData.length;
        for (var id in samePagesData) {
            var dt = samePagesData[id];
            if (!dt)
                continue;
            var pri = dt.words;
            if (!pri)
                continue;
            var pisz = pri.length;
            if (pisz <= 0)
                continue;
            var tex = samePagesData[id].tex;
            for (var j = 0; j < pisz; j++) {
                var riSaved = pri[j];
                var ri = riSaved.ri;
                if (ri.isSpace)
                    continue;
                ri.touch();
                ctx.drawTexAlign = true;
                if (Laya['ILaya'].Render.isConchApp) {
                    ctx._drawTextureM(tex.texture, startx + riSaved.x - ri.orix, starty + riSaved.y - ri.oriy, riSaved.w, riSaved.h, null, 1.0, ri.uv);
                }
                else {
                    let t = tex;
                    ctx._inner_drawTexture(t.texture, t.id, startx + riSaved.x - ri.orix, starty + riSaved.y - ri.oriy, riSaved.w, riSaved.h, mat, ri.uv, 1.0, isLastRender);
                }
                if (ctx.touches) {
                    ctx.touches.push(ri);
                }
            }
        }
    };

    Laya.Node.prototype.find = function (path) {
        if (path == null || path == '' || path == undefined) {
            console.error('find 路径不能为空');
            return this;
        }
        var match = this;
        path = path.replace(new RegExp('^\\/+|\\/+$', 'g'), '');
        var nameList = path.split('/');
        for (var index = 0; index < nameList.length; index++) {
            if (!String.isNullOrEmpty(nameList[index])) {
                match = match.getChildByName(nameList[index]);
                if (!match) {
                    return null;
                }
            }
        }
        return match;
    };
    Laya.Node.prototype.$ = function (path) {
        if (this._nodeDic == null) {
            this._nodeDic = {};
        }
        if (this._nodeDic[path] == null) {
            this._nodeDic[path] = this.find(path);
        }
        return this._nodeDic[path];
    };
    Laya.Node.prototype.getPath = function (root) {
        if (this.parent == root || this.parent == null) {
            return this.name;
        }
        else {
            return this.parent.getPath(root) + '/' + this.name;
        }
    };
    Laya.Node.prototype.findAll = function (pathOrName, name) {
        if (name === undefined) {
            name = pathOrName;
            pathOrName = '/';
        }
        var subChilds = [];
        if (this.name == name) {
            subChilds.push(this);
        }
        else {
            var match = this.find(pathOrName);
            for (var index = 0; match && index < match.numChildren; index++) {
                var tmpSubChilds = match.getChildAt(index).findAll(name);
                if (tmpSubChilds instanceof Array) {
                    subChilds.push(...tmpSubChilds);
                }
                else if (tmpSubChilds != null) {
                    subChilds.push(tmpSubChilds);
                }
            }
        }
        if (subChilds.length > 1) {
            return subChilds;
        }
        else if (subChilds.length == 1) {
            return subChilds[0];
        }
        else {
            return null;
        }
    };

    Object.defineProperty(Laya.System, 'systemInfo', {
        get: function () {
            if (this._systemInfo == null) {
                if (Laya.Browser.onHagoMiniGame) {
                    this._systemInfo = hg.getSystemInfoSync();
                }
                else if ('wx' in Laya.Browser.window) {
                    this._systemInfo = wx.getSystemInfoSync();
                }
                else {
                    let language = navigator.language;
                    if (language == 'zh-CN' || language == 'zh-cn' || language == null) {
                        language = 'zh';
                    }
                    Laya.Browser.clientWidth;
                    this._systemInfo = {
                        language: language,
                        pixelRatio: Laya.Browser.pixelRatio
                    };
                }
            }
            return this._systemInfo;
        }
    });
    Laya.System.vibrate = function (time) {
        if (time === undefined) {
            time = 200;
        }
        if (navigator && navigator.vibrate) {
            navigator.vibrate(time);
        }
    };

    Laya.Text.prototype.set_text = function (value) {
        if (this._text !== value) {
            if (typeof value !== 'string') {
                value = value + '';
            }
            if (value.startsWith('####')) {
                let key = value.substring(4);
                value = Language.getValue(key);
                this._key = key;
                if (!EventManager.isOn('LanguageChange', this, this.onLanguageChange)) {
                    EventManager.on('LanguageChange', this, this.onLanguageChange);
                }
            }
            this.lang(value + '');
            this.isChanged = true;
            this.event(Laya.Event.CHANGE);
            if (this.borderColor) {
                this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1);
            }
        }
    };
    Laya.Text.prototype['onLanguageChange'] = function () {
        if (this._key) {
            this.text = '####' + this._key;
        }
    };
    Laya.Text.prototype['_evalTextSize'] = function () {
        var nw, nh;
        nw = Math.max.apply(this, this._lineWidths);
        if (this._style.currBitmapFont)
            nh =
                this._lines.length * (this._style.currBitmapFont.getMaxHeight() + this.leading) +
                    this.padding[0] +
                    this.padding[2];
        else
            nh = this._lines.length * (this._charSize.height + this.leading) + this.padding[0] + this.padding[2];
        if (nw != this._textWidth || nh != this._textHeight) {
            this._textWidth = nw;
            this._textHeight = nh;
        }
        if (this.textWidth > this.width && this.wordWrap == false) {
            this.fontSize = this.width / this.textWidth * this.fontSize;
        }
    };

    class Language$1 {
        static get lang() {
            return this._lang;
        }
        static set lang(value) {
            this._lang = value;
            console.log('语言切换:', value);
            window['EventManager'].emit('LanguageChange');
        }
        static getValue(key) {
            let keyDic = this._dictionary[key];
            if (keyDic == null) {
                console.warn(`找不到该 key[${key}] 对应的翻译内容, 请核对 jsons/LanguageConfig.json 文件中是否存在 该 key 值`);
                return key;
            }
            else {
                let value = this._dictionary[key][this.lang];
                if (String.isNullOrEmpty(value)) {
                    console.warn(`找不到对应的语言[${this.lang}], 将返回默认语言[${this.default}]: ${key}`);
                    return this._dictionary[key][this.default];
                }
                else {
                    return this._dictionary[key][this.lang];
                }
            }
        }
        static init() {
            let interval = setInterval(() => {
                if (Laya.loader) {
                    Laya.loader.load('jsons/LanguageConfig.json', Laya.Handler.create(this, (jsons) => {
                        if (jsons) {
                            jsons.forEach((keyDic) => {
                                this._dictionary[keyDic['key']] = keyDic;
                                if (this.suportLanguages == null) {
                                    this.suportLanguages = [];
                                    for (const key in keyDic) {
                                        if (key !== 'key') {
                                            this.suportLanguages.push(key);
                                        }
                                    }
                                    console.log(this.suportLanguages);
                                }
                            });
                        }
                    }));
                    clearInterval(interval);
                }
            }, 50);
        }
    }
    Language$1._dictionary = {};
    Language$1._lang = 'ru';
    Language$1.default = 'zh';
    Language$1.hi = 'hi';
    Language$1.ru = 'ru';
    Language$1.ko = 'ko';
    Language$1.pt = 'pt-br';
    Language$1.ms = 'ms';
    Language$1.en = 'en-us';
    Language$1.es = 'es';
    Language$1.zh = 'zh';
    Language$1.id = 'id';
    Language$1.ar = 'ar';
    Language$1.vi = 'vi';
    Language$1.th = 'th';
    Language$1.ja = 'ja';
    window['Language'] = Language$1;
    Language$1.init();

    Object.defineProperty(Laya.Image.prototype, 'skin', {
        set: function (value) {
            if (this._skin != value) {
                if (value.startsWith('####')) {
                    let key = value.substring(4);
                    value = Language.getValue(key);
                    this._key = key;
                    if (!EventManager.isOn('LanguageChange', this, this.onLanguageChange)) {
                        EventManager.on('LanguageChange', this, this.onLanguageChange);
                    }
                }
                this._skin = value;
                if (value) {
                    var source = Laya.Loader.getRes(value);
                    if (source) {
                        this.source = source;
                        this.onCompResize();
                    }
                    else
                        Laya.loader.load(this._skin, Laya.Handler.create(this, this.setSource, [this._skin]), null, Laya.Loader.IMAGE, 1, true, this._group);
                }
                else {
                    this.source = null;
                }
            }
        }
    });
    Laya.Image.prototype['onLanguageChange'] = function () {
        if (this._key) {
            this.skin = '####' + this._key;
        }
    };

    Object.defineProperty(Laya.Button.prototype, 'skin', {
        set: function (value) {
            if (this._skin != value) {
                if (value.startsWith('####')) {
                    let key = value.substring(4);
                    value = Language.getValue(key);
                    this._key = key;
                    if (!EventManager.isOn('LanguageChange', this, this.onLanguageChange)) {
                        EventManager.on('LanguageChange', this, this.onLanguageChange);
                    }
                }
                this._skin = value;
                if (value) {
                    if (!Laya.Loader.getRes(value)) {
                        Laya.loader.load(this._skin, Laya.Handler.create(this, this._skinLoaded), null, Laya.Loader.IMAGE, 1);
                    }
                    else {
                        this._skinLoaded();
                    }
                }
                else {
                    this._skinLoaded();
                }
            }
        }
    });
    Laya.Image.prototype['onLanguageChange'] = function () {
        if (this._key) {
            this.skin = '####' + this._key;
        }
    };

    Date.prototype.format = function (fmt) {
        var o = {
            'M+': this.getMonth() + 1,
            'd+': this.getDate(),
            'H+': this.getHours(),
            'm+': this.getMinutes(),
            's+': this.getSeconds(),
            'q+': Math.floor((this.getMonth() + 3) / 3),
            S: this.getMilliseconds()
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp('(' + k + ')').test(fmt))
                fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
        return fmt;
    };

    Laya.SoundManager.destroySound = function (url) {
        var tSound = Laya.loader.getRes(url);
        if (tSound) {
            console.log('destroySound:bgMusic:', url, this._bgMusic);
            Laya.Loader.clearRes(url);
            tSound.dispose();
        }
    };

    function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach((baseCtor) => {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
                if (derivedCtor.prototype[name] === undefined) {
                    derivedCtor.prototype[name] = baseCtor.prototype[name];
                }
            });
        });
    }
    window['applyMixins'] = applyMixins;
    function compareVersion(version1, version2) {
        let v1 = version1.split('.');
        let v2 = version2.split('.');
        var len = Math.max(v1.length, v2.length);
        while (v1.length < len) {
            v1.push('0');
        }
        while (v2.length < len) {
            v2.push('0');
        }
        for (var i = 0; i < len; i++) {
            var num1 = parseInt(v1[i]);
            var num2 = parseInt(v2[i]);
            if (num1 > num2) {
                return 1;
            }
            else if (num1 < num2) {
                return -1;
            }
        }
        return 0;
    }
    window['compareVersion'] = compareVersion;
    Laya.Utils.reSizeImg = function (url, width, height) {
        if (width === undefined) {
            width = 117;
        }
        if (height === undefined) {
            height = 117;
        }
        if (url.contains('?')) {
            let index = url.indexOf('?');
            if (index != -1) {
                url = url.substr(0, index);
            }
        }
        url += `?x-oss-process=image%2Fresize%2Cw_${width}%2Ch_${height}`;
        return url;
    };

    Laya.LocalStorage.getData = function (keys, callback) {
        if (typeof keys == 'string') {
            keys = [keys];
        }
        if (Laya.Browser.onHagoMiniGame) {
            let timer = 0;
            let interval = setInterval(() => {
                if (timer >= 5000) {
                    callback && callback(null, '获取数据失败');
                    callback = null;
                    clearInterval(interval);
                    interval = -1;
                }
                timer += 200;
            }, 200);
            hg.getUserCloudStorage({
                keyList: keys,
                success: (res) => {
                    if (interval != -1) {
                        clearInterval(interval);
                        interval = -1;
                    }
                    callback && callback(res);
                },
                fail: () => {
                    if (interval != -1) {
                        clearInterval(interval);
                        interval = -1;
                    }
                    callback && callback(null, '获取数据失败');
                }
            });
        }
        else {
            let data = [];
            keys.forEach((key) => {
                let value = Laya.LocalStorage.getItem(key);
                data.push({ key: key, value: value });
            });
            callback && callback(data);
        }
    };
    Laya.LocalStorage.setData = function (data, callback) {
        if (!(data instanceof Array)) {
            data = [data];
        }
        if (Laya.Browser.onHagoMiniGame) {
            hg.setUserCloudStorage({
                KVDataList: data,
                success: () => {
                    callback && callback();
                },
                fail: () => {
                    callback && callback('存储数据失败');
                }
            });
        }
        else {
            data.forEach((item) => {
                Laya.LocalStorage.setItem(item.key, item.value);
            });
            callback && callback();
        }
    };
    Laya.LocalStorage.clearData = function (keyList, callBack) {
        if (Laya.Browser.onHagoMiniGame) {
            hg.removeUserCloudStorage({
                keyList: keyList,
                success: function (res) {
                    callBack && callBack(true);
                },
                fail: function () {
                    callBack && callBack(false);
                }
            });
        }
        else {
            keyList.forEach((key) => {
                Laya.LocalStorage.removeItem(key);
            });
            callBack && callBack(true);
        }
    };

    Object.defineProperty(Laya.Timer, 'realTime', {
        get: function () {
            if (this._realTime == undefined) {
                this._realTime = Date.now();
            }
            return this._realTime;
        },
        set: function (value) {
            this._isRefreshRealTime = true;
            this._lastSystemTime = Date.now();
            this._realTime = value;
        }
    });
    Laya.Timer.prototype.contains = function (caller, method) {
        var handler = this._getHandler(caller, method);
        return handler != null;
    };
    Laya.Timer.syncSystemTime = function (url, callback) {
        if (url === undefined) {
            url = this.TIME_URL;
        }
        if (String.isNullOrEmpty(url)) {
            return;
        }
        else {
            let xhr = new Laya.HttpRequest();
            xhr.http.timeout = 10000;
            xhr.once(Laya.Event.COMPLETE, this, (data) => {
                if (callback) {
                    callback(data);
                }
                else {
                    let sysTime = data['sysTime2'];
                    this.realTime = new Date(sysTime).valueOf();
                }
            });
            xhr.once(Laya.Event.ERROR, this, (data) => {
                console.log('ERROR data:', data);
            });
            xhr.on(Laya.Event.PROGRESS, this, (data) => {
                console.log('PROGRESS data:', data);
            });
            xhr.send(url, null, 'get', 'json');
        }
    };
    Laya.Timer.TIME_URL = 'https://quan.suning.com/getSysTime.do';
    setInterval(function () {
        if (this._lastSystemTime === undefined) {
            this._lastSystemTime = Date.now();
        }
        if (this._realTime === undefined) {
            this._realTime = Date.now();
        }
        if (!this._isRefreshRealTime) {
            let now = Date.now();
            if (Math.abs(now - this._lastSystemTime) < 200) {
                this._realTime += Math.abs(now - this._lastSystemTime);
            }
            this._lastSystemTime = now;
        }
        this._isRefreshRealTime = false;
    }.bind(Laya.Timer), 100);

    Object.defineProperty(Laya.Socket.prototype, 'bufferedAmount', {
        get: function () {
            return this._socket.bufferedAmount;
        }
    });

    class Main {
        constructor() {
            console.warn('Cloud version:', '1.0');
            if (window['Laya3D'])
                Laya3D.init(GameConfig.width, GameConfig.height);
            else
                Laya.init(GameConfig.width, GameConfig.height, Laya['WebGL']);
            Laya['Physics'] && Laya['Physics'].enable();
            Laya['DebugPanel'] && Laya['DebugPanel'].enable();
            wait(() => Laya.stage != null).then(() => {
                Laya.stage.scaleMode = GameConfig.scaleMode;
                Laya.stage.screenMode = GameConfig.screenMode;
                Laya.stage.alignV = GameConfig.alignV;
                Laya.stage.alignH = GameConfig.alignH;
                Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
                if (GameConfig.debug || Laya.Utils.getQueryString('debug') == 'true')
                    Laya.enableDebugPanel();
                if (GameConfig.physicsDebug && Laya['PhysicsDebugDraw'])
                    Laya['PhysicsDebugDraw'].enable();
                Laya.alertGlobalError(true);
                Laya.ResourceVersion.enable('version.json', Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
            });
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable('fileconfig.json', Laya.Handler.create(this, this.onConfigLoaded));
        }
        onConfigLoaded() {
            initEnv();
            Language.default = Language.en;
            Language.lang = Laya.System.systemInfo.language || Language.en;
            GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        }
    }
    function initEnv() {
        console.warn('initEnv:', Laya.Browser.userAgent);
        try {
            Laya.Browser.onHagoMiniGame = hg != undefined;
        }
        catch (error) {
            Laya.Browser.onHagoMiniGame = null;
        }
        console.warn('Laya.Browser.onHagoMiniGame', Laya.Browser.onHagoMiniGame);
    }
    console.warn('加载完成');
    window['onJSLoad'] = function () {
    };
    new Main();

}());
